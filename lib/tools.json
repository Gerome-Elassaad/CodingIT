{
  "name": "CodinIT AI App Builder",
  "description": "Production-grade AI application builder using E2B fragments with multi-framework support",
  "version": "1.0.0",
  "capabilities": {
    "code_generation": true,
    "project_analysis": true,
    "live_execution": true,
    "multi_framework": true,
    "database_integration": true,
    "deployment": true,
    "real_time_editing": true
  },
  "tools": [
    {
      "name": "create_application_fragment",
      "description": "Generate a complete application fragment using AI based on user requirements and selected template",
      "parameters": {
        "type": "object",
        "properties": {
          "template": {
            "type": "string",
            "enum": ["nextjs-developer", "vue-developer", "streamlit-developer", "gradio-developer", "code-interpreter-v1", "codinit-engineer"],
            "description": "Framework template to use for code generation"
          },
          "prompt": {
            "type": "string",
            "description": "Natural language description of the application to build"
          },
          "project_context": {
            "type": "object",
            "properties": {
              "files": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {"type": "string"},
                    "content": {"type": "string"},
                    "path": {"type": "string"}
                  }
                }
              },
              "dependencies": {
                "type": "array",
                "items": {"type": "string"}
              },
              "frameworks": {
                "type": "array",
                "items": {"type": "string"}
              }
            }
          },
          "model_config": {
            "type": "object",
            "properties": {
              "model": {"type": "string"},
              "temperature": {"type": "number", "minimum": 0, "maximum": 2},
              "maxTokens": {"type": "integer", "minimum": 1, "maximum": 10000}
            }
          }
        },
        "required": ["template", "prompt"]
      },
      "returns": {
        "type": "object",
        "properties": {
          "fragment": {
            "type": "object",
            "description": "Generated fragment with files and metadata"
          },
          "execution_result": {
            "type": "object",
            "description": "Live sandbox execution result with URL and status"
          }
        }
      }
    },
    {
      "name": "analyze_project_structure",
      "description": "Analyze uploaded files or GitHub repository to understand project architecture and dependencies",
      "parameters": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "enum": ["upload", "github"],
            "description": "Source of project files"
          },
          "files": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {"type": "string"},
                "content": {"type": "string"},
                "type": {"type": "string"}
              }
            },
            "description": "Uploaded files for analysis"
          },
          "github_url": {
            "type": "string",
            "description": "GitHub repository URL for analysis"
          }
        },
        "required": ["source"]
      },
      "returns": {
        "type": "object",
        "properties": {
          "structure": {
            "type": "object",
            "description": "Analyzed project structure with files, dependencies, and patterns"
          },
          "recommendations": {
            "type": "array",
            "items": {"type": "string"},
            "description": "AI-generated recommendations for the project"
          },
          "frameworks": {
            "type": "array",
            "items": {"type": "string"}
          },
          "components": {
            "type": "array",
            "items": {"type": "string"}
          }
        }
      }
    },
    {
      "name": "execute_code_fragment",
      "description": "Execute code in E2B sandbox environment with real-time monitoring",
      "parameters": {
        "type": "object",
        "properties": {
          "fragment_id": {
            "type": "string",
            "description": "Unique identifier for the fragment to execute"
          },
          "template": {
            "type": "string",
            "enum": ["code-interpreter-v1", "nextjs-developer", "vue-developer", "streamlit-developer", "gradio-developer"]
          },
          "files": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "file_path": {"type": "string"},
                "file_content": {"type": "string"}
              }
            }
          },
          "environment_config": {
            "type": "object",
            "properties": {
              "port": {"type": "integer"},
              "dependencies": {
                "type": "array",
                "items": {"type": "string"}
              }
            }
          }
        },
        "required": ["fragment_id", "template", "files"]
      },
      "returns": {
        "type": "object",
        "properties": {
          "sandbox_id": {"type": "string"},
          "url": {"type": "string", "description": "Live preview URL"},
          "status": {"type": "string"},
          "execution_logs": {
            "type": "array",
            "items": {"type": "string"}
          }
        }
      }
    },
    {
      "name": "live_code_editor",
      "description": "Enable real-time code editing with auto-save and live preview updates",
      "parameters": {
        "type": "object",
        "properties": {
          "sandbox_id": {
            "type": "string",
            "description": "Active sandbox identifier"
          },
          "file_path": {
            "type": "string",
            "description": "Path to file being edited"
          },
          "content": {
            "type": "string",
            "description": "New file content"
          },
          "live_mode": {
            "type": "boolean",
            "default": false,
            "description": "Enable auto-save on edit"
          }
        },
        "required": ["sandbox_id", "file_path", "content"]
      },
      "returns": {
        "type": "object",
        "properties": {
          "success": {"type": "boolean"},
          "updated_preview": {"type": "string", "description": "Updated preview URL"},
          "compilation_errors": {
            "type": "array",
            "items": {"type": "string"}
          }
        }
      }
    },
    {
      "name": "database_integration",
      "description": "Set up and manage database connections, primarily Supabase integration",
      "parameters": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": ["supabase", "sqlite"],
            "default": "supabase"
          },
          "connection_config": {
            "type": "object",
            "properties": {
              "url": {"type": "string"},
              "anon_key": {"type": "string"},
              "service_role_key": {"type": "string"}
            }
          },
          "schema_operations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "operation": {
                  "type": "string",
                  "enum": ["create_table", "create_migration", "setup_rls"]
                },
                "sql": {"type": "string"},
                "table_name": {"type": "string"}
              }
            }
          }
        },
        "required": ["provider"]
      },
      "returns": {
        "type": "object",
        "properties": {
          "connection_status": {"type": "string"},
          "migration_files": {
            "type": "array",
            "items": {"type": "string"}
          },
          "rls_policies": {
            "type": "array",
            "items": {"type": "string"}
          }
        }
      }
    },
    {
      "name": "deploy_application",
      "description": "Deploy application fragment to E2B with public URL and expiration settings",
      "parameters": {
        "type": "object",
        "properties": {
          "sandbox_id": {
            "type": "string",
            "description": "Sandbox to deploy"
          },
          "url": {
            "type": "string",
            "description": "Current sandbox URL"
          },
          "duration": {
            "type": "string",
            "enum": ["30m", "1h", "3h", "6h", "1d"],
            "description": "Deployment duration"
          },
          "team_id": {"type": "string"},
          "access_token": {"type": "string"}
        },
        "required": ["sandbox_id", "url", "duration"]
      },
      "returns": {
        "type": "object",
        "properties": {
          "deployed_url": {"type": "string"},
          "expiration_date": {"type": "string"},
          "billing_info": {"type": "string"}
        }
      }
    },
    {
      "name": "template_system",
      "description": "Manage and utilize framework-specific templates for code generation",
      "parameters": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": ["list_templates", "get_template", "create_custom_template"]
          },
          "template_id": {"type": "string"},
          "custom_template": {
            "type": "object",
            "properties": {
              "name": {"type": "string"},
              "lib": {
                "type": "array",
                "items": {"type": "string"}
              },
              "instructions": {"type": "string"},
              "file": {"type": "string"},
              "port": {"type": "integer"}
            }
          }
        },
        "required": ["action"]
      },
      "returns": {
        "type": "object",
        "properties": {
          "templates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {"type": "string"},
                "name": {"type": "string"},
                "description": {"type": "string"},
                "frameworks": {
                  "type": "array",
                  "items": {"type": "string"}
                }
              }
            }
          },
          "template_details": {"type": "object"}
        }
      }
    },
    {
      "name": "ai_model_management",
      "description": "Configure and manage AI models for code generation with different providers",
      "parameters": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": ["list_models", "configure_model", "test_model"]
          },
          "provider": {
            "type": "string",
            "enum": ["openai", "anthropic", "google", "ollama"]
          },
          "model_id": {"type": "string"},
          "config": {
            "type": "object",
            "properties": {
              "api_key": {"type": "string"},
              "base_url": {"type": "string"},
              "temperature": {"type": "number"},
              "max_tokens": {"type": "integer"},
              "top_p": {"type": "number"}
            }
          }
        },
        "required": ["action"]
      },
      "returns": {
        "type": "object",
        "properties": {
          "available_models": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {"type": "string"},
                "name": {"type": "string"},
                "provider": {"type": "string"},
                "multiModal": {"type": "boolean"}
              }
            }
          },
          "test_result": {"type": "object"}
        }
      }
    },
    {
      "name": "workflow_management",
      "description": "Create and manage multi-fragment workflows with data flow between components",
      "parameters": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": ["create_workflow", "connect_fragments", "execute_workflow"]
          },
          "workflow_id": {"type": "string"},
          "fragments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "fragment_id": {"type": "string"},
                "position": {"type": "object"},
                "connections": {
                  "type": "array",
                  "items": {"type": "string"}
                }
              }
            }
          },
          "data_flow": {
            "type": "object",
            "description": "Define how data flows between fragments"
          }
        },
        "required": ["action"]
      },
      "returns": {
        "type": "object",
        "properties": {
          "workflow_status": {"type": "string"},
          "execution_results": {
            "type": "array",
            "items": {"type": "object"}
          },
          "data_outputs": {"type": "object"}
        }
      }
    },
    {
      "name": "authentication_system",
      "description": "Manage user authentication, team management, and access control",
      "parameters": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": ["authenticate_user", "manage_team", "check_permissions"]
          },
          "credentials": {
            "type": "object",
            "properties": {
              "email": {"type": "string"},
              "provider": {"type": "string"}
            }
          },
          "team_operations": {
            "type": "object",
            "properties": {
              "operation": {"type": "string"},
              "team_id": {"type": "string"}
            }
          }
        },
        "required": ["action"]
      },
      "returns": {
        "type": "object",
        "properties": {
          "session": {"type": "object"},
          "user": {"type": "object"},
          "team": {"type": "object"},
          "permissions": {
            "type": "array",
            "items": {"type": "string"}
          }
        }
      }
    }
  ],
  "execution_environment": {
    "type": "e2b_webcontainer",
    "constraints": {
      "timeout": "10_minutes",
      "file_operations": "full_write_only",
      "package_managers": ["bun", "npm", "pip", "poetry"],
      "supported_languages": ["javascript", "typescript", "python", "go", "rust"],
      "frameworks": ["nextjs", "vue", "react", "streamlit", "gradio"],
      "database_support": ["supabase", "sqlite"],
      "deployment_targets": ["e2b_sandbox", "vercel", "netlify"]
    },
    "performance_targets": {
      "fragment_execution": "sub_10_seconds",
      "code_generation": "sub_30_seconds",
      "live_preview_update": "sub_5_seconds"
    }
  },
  "integration_apis": [
    {
      "name": "E2B Sandbox API",
      "endpoint": "/api/sandbox",
      "description": "Create and manage code execution sandboxes"
    },
    {
      "name": "Chat API",
      "endpoint": "/api/chat",
      "description": "AI-powered code generation and assistance"
    },
    {
      "name": "GitHub Import API",
      "endpoint": "/api/github",
      "description": "Import and analyze GitHub repositories"
    },
    {
      "name": "Deployment API",
      "endpoint": "/api/publish",
      "description": "Deploy applications with public URLs"
    }
  ],
  "security": {
    "authentication": "supabase_auth",
    "authorization": "row_level_security",
    "api_keys": "environment_variables",
    "sandbox_isolation": "e2b_webcontainer",
    "content_security_policy": "strict",
    "rate_limiting": "enabled"
  },
  "monitoring": {
    "execution_tracking": "real_time",
    "error_handling": "comprehensive",
    "performance_metrics": "sub_10s_target",
    "logging": "structured",
    "analytics": "posthog_integration"
  }
}