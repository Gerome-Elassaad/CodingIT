{
  "code-interpreter-v1": {
    "name": "Python Developer",
    "lib": ["python", "jupyter", "numpy", "pandas", "matplotlib", "seaborn", "plotly", "scikit-learn", "tensorflow", "pytorch", "scipy", "statsmodels", "bokeh", "dash", "streamlit", "fastapi", "uvicorn", "sqlalchemy", "redis", "celery", "pytest", "black", "mypy"],
    "file": "main.py",
    "files": ["main.py", "utils/data_processor.py", "utils/ml_models.py", "utils/visualization.py", "config/settings.py", "tests/test_main.py", "requirements.txt", "data/sample.csv"],
    "instructions": "Create production-ready Python applications with advanced data science, machine learning, and web development capabilities. Implement proper project structure, error handling, logging, testing, and documentation. Use type hints, follow PEP 8, and include comprehensive unit tests. Support both data analysis workflows and web API development. Integrate modern ML frameworks and implement scalable architectures.",
    "port": 8000
  },
  "nextjs-developer": {
    "name": "Next.js Developer",
    "lib": [
      "nextjs@15.0.0",
      "typescript",
      "tailwindcss",
      "postcss",
      "autoprefixer",
      "shadcn/ui",
      "clsx",
      "lucide-react",
      "@radix-ui/react-slot",
      "@types/node",
      "@types/react",
      "@types/react-dom",
      "prisma",
      "@prisma/client",
      "next-auth",
      "zod",
      "react-hook-form",
      "@hookform/resolvers",
      "framer-motion",
      "react-query",
      "@tanstack/react-query",
      "axios",
      "socket.io-client",
      "stripe",
      "uploadthing",
      "nodemailer",
      "bcryptjs",
      "jsonwebtoken",
      "winston",
      "helmet",
      "cors",
      "rate-limiter-flexible",
      "joi",
      "moment",
      "lodash",
      "react-hot-toast",
      "recharts",
      "react-markdown",
      "next-mdx-remote",
      "next-sitemap"
    ],
    "file": "app/page.tsx",
    "files": [
      "app/page.tsx",
      "app/layout.tsx",
      "app/globals.css",
      "app/api/auth/[...nextauth]/route.ts",
      "app/api/users/route.ts",
      "components/ui/button.tsx",
      "components/ui/input.tsx",
      "components/ui/form.tsx",
      "components/ui/card.tsx",
      "components/ui/modal.tsx",
      "components/ui/data-table.tsx",
      "components/auth/login-form.tsx",
      "components/auth/register-form.tsx",
      "components/dashboard/analytics.tsx",
      "components/dashboard/sidebar.tsx",
      "components/theme-toggle.tsx",
      "lib/utils.ts",
      "lib/auth.ts",
      "lib/db.ts",
      "lib/validations.ts",
      "lib/email.ts",
      "lib/stripe.ts",
      "lib/logger.ts",
      "hooks/use-auth.ts",
      "hooks/use-local-storage.ts",
      "types/index.ts",
      "middleware.ts",
      "tailwind.config.ts",
      "postcss.config.js",
      "next.config.js",
      "prisma/schema.prisma",
      "prisma/seed.ts",
      ".env.example",
      "package.json"
    ],
    "instructions": "Create enterprise-grade Next.js 15+ applications using ONLY App Router (no Pages Router). CRITICAL: Never create pages/ directory or pages/index.tsx - use only app/ directory structure. Implement comprehensive full-stack capabilities including advanced authentication, real-time features, payment processing, email systems, and robust API design. Use modern React patterns, server components, streaming, and advanced caching strategies. Include comprehensive error handling, logging, security measures, and performance optimizations. Integrate with databases, external APIs, and third-party services. Follow strict TypeScript practices, implement proper testing, and ensure scalability and maintainability. ALWAYS use app/page.tsx as the main entry point, never pages/index.tsx.",
    "port": 3000
  },
  "vue-developer": {
    "name": "Vue.js Developer",
    "lib": ["vue@latest", "nuxt@3.13.0", "tailwindcss", "pinia", "vueuse", "headlessui/vue", "heroicons/vue", "vue-router", "vite", "typescript", "prisma", "zod", "vue-query", "socket.io-client", "axios", "vue-toastification", "vue-chartjs", "chart.js", "nuxt-auth", "bcryptjs", "jsonwebtoken", "nodemailer", "stripe", "winston", "helmet", "cors", "rate-limiter-flexible", "joi", "moment", "lodash", "nuxt-security", "nuxt-icon"],
    "file": "app.vue",
    "files": [
      "app.vue",
      "nuxt.config.ts",
      "components/ui/Button.vue",
      "components/ui/Input.vue",
      "components/ui/Card.vue",
      "components/ui/Modal.vue",
      "components/ui/DataTable.vue",
      "components/auth/LoginForm.vue",
      "components/auth/RegisterForm.vue",
      "components/dashboard/Analytics.vue",
      "components/dashboard/Sidebar.vue",
      "components/ThemeToggle.vue",
      "layouts/default.vue",
      "layouts/auth.vue",
      "layouts/dashboard.vue",
      "pages/index.vue",
      "pages/login.vue",
      "pages/register.vue",
      "pages/dashboard.vue",
      "server/api/auth/login.post.ts",
      "server/api/auth/register.post.ts",
      "server/api/users/index.get.ts",
      "middleware/auth.ts",
      "plugins/auth.client.ts",
      "composables/useAuth.ts",
      "composables/useLocalStorage.ts",
      "stores/auth.ts",
      "stores/user.ts",
      "types/index.ts",
      "utils/validation.ts",
      "utils/email.ts",
      "utils/stripe.ts",
      "utils/logger.ts",
      "assets/styles/tailwind.css",
      "prisma/schema.prisma",
      "prisma/seed.ts",
      ".env.example",
      "package.json"
    ],
    "instructions": "Create enterprise-grade Vue.js applications with Nuxt 3 featuring comprehensive full-stack capabilities. Implement advanced authentication, real-time features, payment processing, email systems, and robust API design. Use Composition API, Pinia for state management, and modern Vue patterns. Include server-side rendering, API routes, middleware, and advanced caching strategies. Implement comprehensive error handling, logging, security measures, and performance optimizations. Integrate with databases, external APIs, and third-party services. Follow strict TypeScript practices and ensure scalability and maintainability.",
    "port": 3000
  },
  "streamlit-developer": {
    "name": "Streamlit Developer",
    "lib": [
      "streamlit",
      "pandas",
      "numpy",
      "matplotlib",
      "seaborn",
      "plotly",
      "altair",
      "bokeh",
      "scikit-learn",
      "tensorflow",
      "pytorch",
      "requests",
      "sqlalchemy",
      "psycopg2",
      "pymongo",
      "redis",
      "streamlit-authenticator",
      "streamlit-option-menu",
      "streamlit-aggrid",
      "streamlit-elements",
      "streamlit-lottie",
      "streamlit-folium",
      "folium",
      "pydeck",
      "yfinance",
      "alpaca-trade-api",
      "openai",
      "anthropic",
      "langchain",
      "llama-index",
      "sentence-transformers",
      "transformers",
      "opencv-python",
      "pillow",
      "boto3",
      "azure-storage-blob",
      "google-cloud-storage",
      "stripe",
      "sendgrid",
      "twilio",
      "celery",
      "apscheduler",
      "pytest",
      "black",
      "mypy"
    ],
    "file": "app.py",
    "files": [
      "app.py",
      "pages/1_Dashboard.py",
      "pages/2_Analytics.py",
      "pages/3_ML_Models.py",
      "pages/4_Data_Upload.py",
      "pages/5_Settings.py",
      "utils/data_processor.py",
      "utils/ml_models.py",
      "utils/visualizations.py",
      "utils/auth.py",
      "utils/database.py",
      "utils/api_client.py",
      "utils/file_handler.py",
      "components/sidebar.py",
      "components/charts.py",
      "components/forms.py",
      "components/tables.py",
      "config/settings.py",
      "config/database.py",
      "models/user.py",
      "models/data_model.py",
      "services/ai_service.py",
      "services/data_service.py",
      "services/notification_service.py",
      "tests/test_app.py",
      "tests/test_utils.py",
      "data/sample_data.csv",
      "data/config.json",
      "assets/style.css",
      "assets/logo.png",
      "requirements.txt",
      "Dockerfile",
      ".env.example",
      "README.md"
    ],
    "instructions": "Create enterprise-grade Streamlit applications with advanced data science, machine learning, and business intelligence capabilities. Implement multi-page applications with sophisticated navigation, user authentication, real-time data processing, and interactive visualizations. Include database connectivity, API integrations, file upload/processing, ML model deployment, and automated reporting. Use modern Python patterns, proper error handling, logging, testing, and deployment configurations. Support real-time updates, caching strategies, and performance optimizations. Integrate with cloud services, AI/ML APIs, and external data sources.",
    "port": 8501
  },
  "gradio-developer": {
    "name": "Gradio Developer",
    "lib": [
      "gradio",
      "pandas",
      "numpy",
      "matplotlib",
      "seaborn",
      "plotly",
      "altair",
      "bokeh",
      "scikit-learn",
      "tensorflow",
      "pytorch",
      "transformers",
      "diffusers",
      "accelerate",
      "sentence-transformers",
      "langchain",
      "llama-index",
      "openai",
      "anthropic",
      "requests",
      "beautifulsoup4",
      "selenium",
      "opencv-python",
      "pillow",
      "librosa",
      "speechrecognition",
      "gtts",
      "pydub",
      "moviepy",
      "gradio-client",
      "huggingface-hub",
      "datasets",
      "evaluate",
      "wandb",
      "mlflow",
      "redis",
      "sqlalchemy",
      "psycopg2",
      "pymongo",
      "boto3",
      "azure-storage-blob",
      "google-cloud-storage",
      "stripe",
      "sendgrid",
      "twilio",
      "celery",
      "apscheduler",
      "pytest",
      "black",
      "mypy",
      "uvicorn",
      "fastapi"
    ],
    "file": "app.py",
    "files": [
      "app.py",
      "interfaces/text_interface.py",
      "interfaces/image_interface.py",
      "interfaces/audio_interface.py",
      "interfaces/video_interface.py",
      "interfaces/multimodal_interface.py",
      "models/text_models.py",
      "models/image_models.py",
      "models/audio_models.py",
      "models/video_models.py",
      "models/multimodal_models.py",
      "utils/data_processor.py",
      "utils/model_loader.py",
      "utils/file_handler.py",
      "utils/api_client.py",
      "utils/cache_manager.py",
      "components/custom_components.py",
      "components/advanced_ui.py",
      "components/charts.py",
      "components/forms.py",
      "services/ai_service.py",
      "services/data_service.py",
      "services/notification_service.py",
      "services/storage_service.py",
      "config/settings.py",
      "config/model_config.py",
      "config/api_config.py",
      "auth/authentication.py",
      "auth/authorization.py",
      "database/models.py",
      "database/operations.py",
      "api/endpoints.py",
      "api/middleware.py",
      "tests/test_models.py",
      "tests/test_interfaces.py",
      "tests/test_utils.py",
      "data/sample_data.json",
      "data/model_configs.yaml",
      "assets/styles.css",
      "assets/custom.js",
      "requirements.txt",
      "Dockerfile",
      ".env.example",
      "README.md"
    ],
    "instructions": "Create sophisticated AI/ML interfaces using Gradio with advanced capabilities for text, image, audio, video, and multimodal processing. Implement production-ready applications with model deployment, real-time inference, batch processing, and API integrations. Include user authentication, database connectivity, cloud storage, payment processing, and notification systems. Use modern Python patterns, comprehensive error handling, logging, testing, and deployment configurations. Support multiple AI/ML frameworks, custom model loading, caching strategies, and performance optimizations. Integrate with major AI APIs, cloud services, and external data sources.",
    "port": 7860
  },
  "bolt.diy": {
    "name": "Bolt.DIY",
    "lib": [],
    "file": "script.py",
    "files": [],
    "instructions": "A generic sandbox environment with bolt.diy.",
    "port": null
  }
}
