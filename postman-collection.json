{
  "info": {
    "name": "CodingIT API Collection",
    "description": "Complete API collection for CodingIT - AI-powered software engineering platform",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{supabase_access_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{BASE_URL}}",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "GitHub OAuth Callback",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/auth/github?code={{github_code}}&state={{github_state}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "github"],
              "query": [
                {
                  "key": "code",
                  "value": "{{github_code}}",
                  "description": "Authorization code from GitHub OAuth"
                },
                {
                  "key": "state",
                  "value": "{{github_state}}",
                  "description": "State parameter for CSRF protection"
                }
              ]
            },
            "description": "Handle GitHub OAuth callback and setup webhooks"
          },
          "response": []
        },
        {
          "name": "Revoke GitHub Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"access_token\": \"{{github_access_token}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/github/revoke",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "github", "revoke"]
            },
            "description": "Revoke GitHub access token and disconnect integration"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Chat & AI Generation",
      "item": [
        {
          "name": "Generate Fragment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Create a Python script that analyzes data from a CSV file\"\n    }\n  ],\n  \"userID\": \"{{user_id}}\",\n  \"teamID\": \"{{team_id}}\",\n  \"template\": \"code-interpreter-v1\",\n  \"model\": \"claude-3-sonnet-20240229\",\n  \"config\": {\n    \"model\": \"claude-3-sonnet-20240229\",\n    \"apiKey\": \"{{anthropic_api_key}}\",\n    \"temperature\": 0.7,\n    \"maxTokens\": 4000\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/chat",
              "host": ["{{baseUrl}}"],
              "path": ["api", "chat"]
            },
            "description": "Generate AI-powered code fragments using various LLM models"
          },
          "response": []
        },
        {
          "name": "Generate Workflow",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Create a data processing workflow that ingests CSV data, cleans it, analyzes it, and generates visualizations\"\n    }\n  ],\n  \"userID\": \"{{user_id}}\",\n  \"teamID\": \"{{team_id}}\",\n  \"template\": \"code-interpreter-v1\",\n  \"model\": \"claude-3-sonnet-20240229\",\n  \"config\": {\n    \"model\": \"claude-3-sonnet-20240229\",\n    \"apiKey\": \"{{anthropic_api_key}}\",\n    \"temperature\": 0.7,\n    \"maxTokens\": 4000\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/chat/workflow",
              "host": ["{{baseUrl}}"],
              "path": ["api", "chat", "workflow"]
            },
            "description": "Generate multi-step workflows with AI detection and fragment breakdown"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Code Execution",
      "item": [
        {
          "name": "Execute Code",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"sessionID\": \"{{session_id}}\",\n  \"code\": \"import pandas as pd\\nimport matplotlib.pyplot as plt\\n\\n# Sample data analysis\\ndata = {'x': [1, 2, 3, 4, 5], 'y': [2, 4, 6, 8, 10]}\\ndf = pd.DataFrame(data)\\nprint(df.head())\\n\\nplt.plot(df['x'], df['y'])\\nplt.title('Sample Plot')\\nplt.show()\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/code/execute",
              "host": ["{{baseUrl}}"],
              "path": ["api", "code", "execute"]
            },
            "description": "Execute code in isolated E2B sandboxes with result capture"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Sandbox Management",
      "item": [
        {
          "name": "Create/Run Sandbox",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fragment\": {\n    \"commentary\": \"Creating a Python data analysis script with pandas and matplotlib\",\n    \"template\": \"code-interpreter-v1\",\n    \"title\": \"Data Analysis\",\n    \"description\": \"Analyze CSV data and create visualizations\",\n    \"additional_dependencies\": [\"seaborn\", \"numpy\"],\n    \"has_additional_dependencies\": true,\n    \"install_dependencies_command\": \"pip install seaborn numpy\",\n    \"port\": null,\n    \"file_path\": \"analysis.py\",\n    \"code\": \"import pandas as pd\\nimport matplotlib.pyplot as plt\\nimport seaborn as sns\\n\\n# Data analysis code here\"\n  },\n  \"userID\": \"{{user_id}}\",\n  \"teamID\": \"{{team_id}}\",\n  \"accessToken\": \"{{supabase_access_token}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/sandbox",
              "host": ["{{baseUrl}}"],
              "path": ["api", "sandbox"]
            },
            "description": "Create new sandbox instances and execute fragments"
          },
          "response": []
        },
        {
          "name": "Execute Terminal Command",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"command\": \"ls -la\",\n  \"sbxId\": \"{{sandbox_id}}\",\n  \"workingDirectory\": \"/home/user\",\n  \"teamID\": \"{{team_id}}\",\n  \"accessToken\": \"{{supabase_access_token}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/terminal",
              "host": ["{{baseUrl}}"],
              "path": ["api", "terminal"]
            },
            "description": "Execute terminal commands in sandbox environments"
          },
          "response": []
        }
      ]
    },
    {
      "name": "File Operations",
      "item": [
        {
          "name": "List Files",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/files?sessionID={{session_id}}&template=code-interpreter-v1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "files"],
              "query": [
                {
                  "key": "sessionID",
                  "value": "{{session_id}}"
                },
                {
                  "key": "template",
                  "value": "code-interpreter-v1"
                }
              ]
            },
            "description": "List all files in sandbox with tree structure"
          },
          "response": []
        },
        {
          "name": "Read File Content",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/files/content?sessionID={{session_id}}&path=/home/user/main.py&template=code-interpreter-v1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "files", "content"],
              "query": [
                {
                  "key": "sessionID",
                  "value": "{{session_id}}"
                },
                {
                  "key": "path",
                  "value": "/home/user/main.py"
                },
                {
                  "key": "template",
                  "value": "code-interpreter-v1"
                }
              ]
            },
            "description": "Read content of specific file in sandbox"
          },
          "response": []
        },
        {
          "name": "Write File Content",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"sessionID\": \"{{session_id}}\",\n  \"path\": \"/home/user/new_file.py\",\n  \"content\": \"# New Python file\\nprint('Hello, World!')\\n\\ndef main():\\n    print('This is a new file')\\n\\nif __name__ == '__main__':\\n    main()\",\n  \"template\": \"code-interpreter-v1\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/files/content",
              "host": ["{{baseUrl}}"],
              "path": ["api", "files", "content"]
            },
            "description": "Write content to file in sandbox"
          },
          "response": []
        },
        {
          "name": "Connect to Existing Sandbox",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/files/sandbox?sandboxId={{sandbox_id}}&path=/home/user/main.py",
              "host": ["{{baseUrl}}"],
              "path": ["api", "files", "sandbox"],
              "query": [
                {
                  "key": "sandboxId",
                  "value": "{{sandbox_id}}"
                },
                {
                  "key": "path",
                  "value": "/home/user/main.py"
                }
              ]
            },
            "description": "Read file from existing sandbox by ID"
          },
          "response": []
        },
        {
          "name": "Write to Existing Sandbox",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"sandboxId\": \"{{sandbox_id}}\",\n  \"path\": \"/home/user/updated_file.py\",\n  \"content\": \"# Updated content\\nprint('File has been updated!')\\n\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/files/sandbox",
              "host": ["{{baseUrl}}"],
              "path": ["api", "files", "sandbox"]
            },
            "description": "Write file to existing sandbox by ID"
          },
          "response": []
        },
        {
          "name": "List Files in Existing Sandbox",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/files/sandbox/list?sandboxId={{sandbox_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "files", "sandbox", "list"],
              "query": [
                {
                  "key": "sandboxId",
                  "value": "{{sandbox_id}}"
                }
              ]
            },
            "description": "List all files in existing sandbox"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Debug & Analysis",
      "item": [
        {
          "name": "Analyze Error",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"error\": \"NameError: name 'pandas' is not defined\",\n  \"context\": {\n    \"template\": \"code-interpreter-v1\",\n    \"line_number\": 5\n  },\n  \"code\": \"import matplotlib.pyplot as plt\\n\\n# This will cause an error\\ndf = pandas.DataFrame({'x': [1,2,3]})\\nprint(df)\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/debug",
              "host": ["{{baseUrl}}"],
              "path": ["api", "debug"]
            },
            "description": "Analyze runtime errors and get AI-powered debugging suggestions"
          },
          "response": []
        },
        {
          "name": "Get Debug Session",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/debug?session_id={{debug_session_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "debug"],
              "query": [
                {
                  "key": "session_id",
                  "value": "{{debug_session_id}}"
                }
              ]
            },
            "description": "Get specific debug session details"
          },
          "response": []
        },
        {
          "name": "List Active Debug Sessions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/debug",
              "host": ["{{baseUrl}}"],
              "path": ["api", "debug"]
            },
            "description": "List all active debug sessions"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Deployments",
      "item": [
        {
          "name": "Create Deployment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fragment\": {\n    \"commentary\": \"Deploying a Next.js web application\",\n    \"template\": \"nextjs-developer\",\n    \"title\": \"Portfolio Site\",\n    \"description\": \"Personal portfolio website with modern design\",\n    \"additional_dependencies\": [\"tailwindcss\", \"framer-motion\"],\n    \"has_additional_dependencies\": true,\n    \"install_dependencies_command\": \"npm install tailwindcss framer-motion\",\n    \"port\": 3000,\n    \"file_path\": \"pages/index.js\",\n    \"code\": \"export default function Home() {\\n  return <div><h1>Hello World</h1></div>\\n}\"\n  },\n  \"config\": {\n    \"provider\": \"vercel\",\n    \"environment\": \"production\",\n    \"domain\": \"my-app.vercel.app\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/deployments",
              "host": ["{{baseUrl}}"],
              "path": ["api", "deployments"]
            },
            "description": "Deploy fragments to cloud platforms"
          },
          "response": []
        },
        {
          "name": "List Deployments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/deployments?fragment_id={{fragment_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "deployments"],
              "query": [
                {
                  "key": "fragment_id",
                  "value": "{{fragment_id}}"
                }
              ]
            },
            "description": "List deployment history for fragments"
          },
          "response": []
        },
        {
          "name": "Get Deployment Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/deployments/{{deployment_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "deployments", "{{deployment_id}}"]
            },
            "description": "Get specific deployment status and details"
          },
          "response": []
        },
        {
          "name": "Cancel Deployment",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/deployments/{{deployment_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "deployments", "{{deployment_id}}"]
            },
            "description": "Cancel running deployment"
          },
          "response": []
        },
        {
          "name": "Rollback Deployment",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/deployments/{{deployment_id}}/rollback",
              "host": ["{{baseUrl}}"],
              "path": ["api", "deployments", "{{deployment_id}}", "rollback"]
            },
            "description": "Rollback deployment to previous version"
          },
          "response": []
        }
      ]
    },
    {
      "name": "GitHub Integration",
      "item": [
        {
          "name": "List GitHub Repositories",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/integrations/github/repos?page=1&per_page=30&sort=updated&type=owner",
              "host": ["{{baseUrl}}"],
              "path": ["api", "integrations", "github", "repos"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "per_page",
                  "value": "30"
                },
                {
                  "key": "sort",
                  "value": "updated"
                },
                {
                  "key": "type",
                  "value": "owner"
                }
              ]
            },
            "description": "List user's GitHub repositories with filtering options"
          },
          "response": []
        },
        {
          "name": "Get Repository Contents",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/integrations/github/repos/{{owner}}/{{repo}}?path={{file_path}}&ref=main",
              "host": ["{{baseUrl}}"],
              "path": ["api", "integrations", "github", "repos", "{{owner}}", "{{repo}}"],
              "query": [
                {
                  "key": "path",
                  "value": "{{file_path}}"
                },
                {
                  "key": "ref",
                  "value": "main"
                }
              ]
            },
            "description": "Get contents of specific repository files or directories"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Workflows",
      "item": [
        {
          "name": "List Workflows",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/workflows?limit=50&offset=0&team_id={{team_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "workflows"],
              "query": [
                {
                  "key": "limit",
                  "value": "50"
                },
                {
                  "key": "offset",
                  "value": "0"
                },
                {
                  "key": "team_id",
                  "value": "{{team_id}}"
                }
              ]
            },
            "description": "List all workflows for user or team"
          },
          "response": []
        },
        {
          "name": "Create Workflow",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Data Processing Pipeline\",\n  \"description\": \"Complete data processing workflow with validation, analysis, and reporting\",\n  \"fragments\": [\n    {\n      \"id\": \"node_1\",\n      \"type\": \"fragment\",\n      \"position\": { \"x\": 100, \"y\": 100 },\n      \"data\": {\n        \"template\": \"code-interpreter-v1\",\n        \"title\": \"Data Ingestion\",\n        \"code\": \"import pandas as pd\\ndf = pd.read_csv('data.csv')\\nprint(df.head())\"\n      }\n    },\n    {\n      \"id\": \"node_2\",\n      \"type\": \"fragment\",\n      \"position\": { \"x\": 300, \"y\": 100 },\n      \"data\": {\n        \"template\": \"code-interpreter-v1\",\n        \"title\": \"Data Cleaning\",\n        \"code\": \"df_clean = df.dropna()\\ndf_clean = df_clean.drop_duplicates()\"\n      }\n    }\n  ],\n  \"connections\": [\n    {\n      \"id\": \"conn_1\",\n      \"source\": { \"nodeId\": \"node_1\", \"portId\": \"output_1\" },\n      \"target\": { \"nodeId\": \"node_2\", \"portId\": \"input_1\" },\n      \"dataType\": \"object\"\n    }\n  ],\n  \"variables\": [\n    {\n      \"name\": \"input_file\",\n      \"type\": \"string\",\n      \"default\": \"data.csv\",\n      \"description\": \"Input CSV file path\"\n    }\n  ],\n  \"triggers\": [\n    {\n      \"id\": \"trigger_1\",\n      \"type\": \"manual\",\n      \"config\": {}\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/workflows",
              "host": ["{{baseUrl}}"],
              "path": ["api", "workflows"]
            },
            "description": "Create new multi-step workflow"
          },
          "response": []
        },
        {
          "name": "Get Workflow",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/workflows/{{workflow_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "workflows", "{{workflow_id}}"]
            },
            "description": "Get specific workflow details"
          },
          "response": []
        },
        {
          "name": "Update Workflow",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Data Processing Pipeline\",\n  \"description\": \"Enhanced data processing workflow with additional validation steps\",\n  \"fragments\": [],\n  \"connections\": [],\n  \"variables\": [],\n  \"triggers\": [],\n  \"version\": 2\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/workflows/{{workflow_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "workflows", "{{workflow_id}}"]
            },
            "description": "Update existing workflow"
          },
          "response": []
        },
        {
          "name": "Delete Workflow",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/workflows/{{workflow_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "workflows", "{{workflow_id}}"]
            },
            "description": "Delete workflow permanently"
          },
          "response": []
        },
        {
          "name": "Execute Workflow",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"inputData\": {\n    \"input_file\": \"sample_data.csv\",\n    \"output_format\": \"json\"\n  },\n  \"triggerType\": \"manual\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/workflows/{{workflow_id}}/execute",
              "host": ["{{baseUrl}}"],
              "path": ["api", "workflows", "{{workflow_id}}", "execute"]
            },
            "description": "Execute workflow with input parameters"
          },
          "response": []
        },
        {
          "name": "Get Execution Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/workflows/{{workflow_id}}/execute?execution_id={{execution_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "workflows", "{{workflow_id}}", "execute"],
              "query": [
                {
                  "key": "execution_id",
                  "value": "{{execution_id}}"
                }
              ]
            },
            "description": "Get specific workflow execution status"
          },
          "response": []
        },
        {
          "name": "List Workflow Executions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/workflows/{{workflow_id}}/execute?limit=50&offset=0",
              "host": ["{{baseUrl}}"],
              "path": ["api", "workflows", "{{workflow_id}}", "execute"],
              "query": [
                {
                  "key": "limit",
                  "value": "50"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ]
            },
            "description": "List all executions for a workflow"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Data & Import",
      "item": [
        {
          "name": "Import HuggingFace Dataset",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"subset\": \"python\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/import-dataset",
              "host": ["{{baseUrl}}"],
              "path": ["api", "import-dataset"]
            },
            "description": "Import code datasets from HuggingFace for embeddings and search"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Webhooks",
      "item": [
        {
          "name": "GitHub Webhook",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-GitHub-Event",
                "value": "push"
              },
              {
                "key": "X-GitHub-Delivery",
                "value": "12345-abcdef"
              },
              {
                "key": "X-Hub-Signature-256",
                "value": "sha256={{webhook_signature}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"ref\": \"refs/heads/main\",\n  \"repository\": {\n    \"full_name\": \"user/repo\",\n    \"owner\": {\n      \"login\": \"user\"\n    }\n  },\n  \"commits\": [\n    {\n      \"id\": \"abc123\",\n      \"message\": \"Update README\",\n      \"author\": {\n        \"name\": \"User\",\n        \"email\": \"user@example.com\"\n      }\n    }\n  ],\n  \"pusher\": {\n    \"name\": \"user\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/webhooks/github",
              "host": ["{{baseUrl}}"],
              "path": ["api", "webhooks", "github"]
            },
            "description": "Handle GitHub webhook events (push, pull_request, issues)"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-generate session ID if not present",
          "if (!pm.environment.get('session_id')) {",
          "    pm.environment.set('session_id', 'session_' + Date.now());",
          "}",
          "",
          "// Auto-generate user ID if not present", 
          "if (!pm.environment.get('user_id')) {",
          "    pm.environment.set('user_id', 'user_' + Date.now());",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Basic response validation",
          "pm.test('Response status code is not 500', function () {",
          "    pm.expect(pm.response.code).to.not.equal(500);",
          "});",
          "",
          "// Extract sandbox ID from responses",
          "if (pm.response.json() && pm.response.json().sbxId) {",
          "    pm.environment.set('sandbox_id', pm.response.json().sbxId);",
          "}",
          "",
          "// Extract execution ID from workflow responses",
          "if (pm.response.json() && pm.response.json().executionId) {",
          "    pm.environment.set('execution_id', pm.response.json().executionId);",
          "}"
        ]
      }
    }
  ]
}