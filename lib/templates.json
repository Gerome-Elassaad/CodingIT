{
  "code-interpreter-v1": {
    "name": "Python data analyst",
    "lib": ["python", "jupyter", "numpy", "pandas", "matplotlib", "seaborn", "plotly", "scikit-learn", "requests"],
    "files": {
      "main.py": "# Data Analysis Workspace\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\n# Sample data loading template\ndef load_sample_data():\n    \"\"\"Load sample dataset for exploration\"\"\"\n    return pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/iris.csv')\n\n# Analysis functions template\ndef explore_data(df):\n    \"\"\"Basic data exploration\"\"\"\n    print(f\"Dataset shape: {df.shape}\")\n    print(f\"\\nData types:\\n{df.dtypes}\")\n    print(f\"\\nMissing values:\\n{df.isnull().sum()}\")\n    return df.describe()\n\n# Visualization template\ndef create_dashboard(df):\n    \"\"\"Create interactive visualizations\"\"\"\n    fig = px.scatter_matrix(df, dimensions=df.select_dtypes(include=[np.number]).columns)\n    return fig\n\nif __name__ == \"__main__\":\n    # Start here - modify as needed\n    data = load_sample_data()\n    stats = explore_data(data)\n    chart = create_dashboard(data)\n    chart.show()",
      "utils.py": "# Utility functions for data processing\nimport pandas as pd\nimport numpy as np\nfrom typing import List, Dict, Any\n\ndef clean_data(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"Standard data cleaning pipeline\"\"\"\n    # Remove duplicates\n    df = df.drop_duplicates()\n    \n    # Handle missing values\n    numeric_cols = df.select_dtypes(include=[np.number]).columns\n    df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].median())\n    \n    categorical_cols = df.select_dtypes(include=['object']).columns\n    df[categorical_cols] = df[categorical_cols].fillna(df[categorical_cols].mode().iloc[0])\n    \n    return df\n\ndef feature_engineering(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"Feature engineering template\"\"\"\n    # Add your feature engineering logic here\n    return df\n\ndef export_results(data: Any, filename: str, format: str = 'csv'):\n    \"\"\"Export analysis results\"\"\"\n    if format == 'csv' and isinstance(data, pd.DataFrame):\n        data.to_csv(f'{filename}.csv', index=False)\n    elif format == 'json':\n        import json\n        with open(f'{filename}.json', 'w') as f:\n            json.dump(data, f, indent=2)\n    print(f\"Results exported to {filename}.{format}\")",
      "config.py": "# Configuration settings for data analysis\n\n# Data source configurations\nDATA_SOURCES = {\n    'sample': 'https://raw.githubusercontent.com/plotly/datasets/master/iris.csv',\n    'local': './data/input.csv'\n}\n\n# Visualization settings\nVIZ_CONFIG = {\n    'theme': 'plotly_white',\n    'color_palette': 'viridis',\n    'figure_size': (12, 8)\n}\n\n# Analysis parameters\nANALYSIS_CONFIG = {\n    'test_size': 0.2,\n    'random_state': 42,\n    'cv_folds': 5\n}"
    },
    "instructions": "Interactive Python environment for building data analysis workflows. Starts with a comprehensive data science template including data loading, cleaning, exploration, and visualization utilities. Modify the template functions to build custom analysis pipelines that can connect to other fragments.",
    "port": null
  },
  "nextjs-developer": {
    "name": "Next.js developer",
    "lib": ["nextjs@14.2.5", "typescript", "@types/node", "@types/react", "@types/react-dom", "postcss", "tailwindcss", "shadcn"],
    "files": {
      "pages/index.tsx": "import { useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { Dashboard } from '@/components/dashboard'\nimport { Analytics } from '@/components/analytics'\n\nexport default function Home() {\n  const [activeTab, setActiveTab] = useState('dashboard')\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-4xl font-bold tracking-tight\">AI App Builder</h1>\n        <p className=\"text-muted-foreground mt-2\">Build and deploy AI applications with ease</p>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"dashboard\">Dashboard</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n          <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"dashboard\" className=\"space-y-6\">\n          <Dashboard />\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-6\">\n          <Analytics />\n        </TabsContent>\n\n        <TabsContent value=\"settings\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Application Settings</CardTitle>\n              <CardDescription>Configure your AI application</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"api-key\">API Key</Label>\n                <Input id=\"api-key\" placeholder=\"Enter your API key\" type=\"password\" />\n              </div>\n              <Button>Save Settings</Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}",
      "components/dashboard.tsx": "import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Progress } from '@/components/ui/progress'\nimport { Activity, Users, TrendingUp, Zap } from 'lucide-react'\n\nexport function Dashboard() {\n  const stats = [\n    { title: 'Total Users', value: '2,543', icon: Users, change: '+12%' },\n    { title: 'Active Sessions', value: '1,234', icon: Activity, change: '+5%' },\n    { title: 'Success Rate', value: '98.2%', icon: TrendingUp, change: '+0.3%' },\n    { title: 'API Calls', value: '45,678', icon: Zap, change: '+23%' }\n  ]\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        {stats.map((stat) => {\n          const Icon = stat.icon\n          return (\n            <Card key={stat.title}>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">{stat.title}</CardTitle>\n                <Icon className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{stat.value}</div>\n                <Badge variant=\"secondary\" className=\"mt-1\">{stat.change}</Badge>\n              </CardContent>\n            </Card>\n          )\n        })}\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n            <CardDescription>Common tasks and operations</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <Button className=\"w-full justify-start\">Create New App</Button>\n            <Button variant=\"outline\" className=\"w-full justify-start\">Deploy Application</Button>\n            <Button variant=\"ghost\" className=\"w-full justify-start\">View Logs</Button>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>System Status</CardTitle>\n            <CardDescription>Current system performance</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>CPU Usage</span>\n                <span>45%</span>\n              </div>\n              <Progress value={45} />\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Memory</span>\n                <span>67%</span>\n              </div>\n              <Progress value={67} />\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Storage</span>\n                <span>23%</span>\n              </div>\n              <Progress value={23} />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}",
      "components/analytics.tsx": "import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { BarChart3, LineChart, PieChart } from 'lucide-react'\n\nexport function Analytics() {\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Analytics Overview</CardTitle>\n          <CardDescription>Insights into your AI application performance</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Tabs defaultValue=\"usage\" className=\"space-y-4\">\n            <TabsList>\n              <TabsTrigger value=\"usage\">Usage</TabsTrigger>\n              <TabsTrigger value=\"performance\">Performance</TabsTrigger>\n              <TabsTrigger value=\"errors\">Errors</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"usage\" className=\"space-y-4\">\n              <div className=\"grid gap-4 md:grid-cols-3\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Requests</CardTitle>\n                    <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">145,892</div>\n                    <p className=\"text-xs text-muted-foreground\">+15% from last month</p>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Avg Response Time</CardTitle>\n                    <LineChart className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">234ms</div>\n                    <p className=\"text-xs text-muted-foreground\">-12ms from last week</p>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Success Rate</CardTitle>\n                    <PieChart className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">99.1%</div>\n                    <p className=\"text-xs text-muted-foreground\">+0.3% improvement</p>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"performance\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Performance Metrics</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">Performance charts and metrics will be displayed here.</p>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"errors\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Error Analysis</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">Error tracking and analysis will be displayed here.</p>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}",
      "components/ui/button.tsx": "import * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\nimport { cn } from '@/lib/utils'\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\n        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',\n        outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-10 px-4 py-2',\n        sm: 'h-9 rounded-md px-3',\n        lg: 'h-11 rounded-md px-8',\n        icon: 'h-10 w-10',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : 'button'\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = 'Button'\n\nexport { Button, buttonVariants }",
      "lib/utils.ts": "import { type ClassValue, clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}",
      "tailwind.config.js": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: ['class'],\n  content: [\n    './pages/**/*.{ts,tsx}',\n    './components/**/*.{ts,tsx}',\n    './app/**/*.{ts,tsx}',\n    './src/**/*.{ts,tsx}',\n  ],\n  theme: {\n    container: {\n      center: true,\n      padding: '2rem',\n      screens: {\n        '2xl': '1400px',\n      },\n    },\n    extend: {\n      colors: {\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))',\n        },\n        secondary: {\n          DEFAULT: 'hsl(var(--secondary))',\n          foreground: 'hsl(var(--secondary-foreground))',\n        },\n        destructive: {\n          DEFAULT: 'hsl(var(--destructive))',\n          foreground: 'hsl(var(--destructive-foreground))',\n        },\n        muted: {\n          DEFAULT: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))',\n        },\n        accent: {\n          DEFAULT: 'hsl(var(--accent))',\n          foreground: 'hsl(var(--accent-foreground))',\n        },\n        popover: {\n          DEFAULT: 'hsl(var(--popover))',\n          foreground: 'hsl(var(--popover-foreground))',\n        },\n        card: {\n          DEFAULT: 'hsl(var(--card))',\n          foreground: 'hsl(var(--card-foreground))',\n        },\n      },\n      borderRadius: {\n        lg: 'var(--radius)',\n        md: 'calc(var(--radius) - 2px)',\n        sm: 'calc(var(--radius) - 4px)',\n      },\n      keyframes: {\n        'accordion-down': {\n          from: { height: 0 },\n          to: { height: 'var(--radix-accordion-content-height)' },\n        },\n        'accordion-up': {\n          from: { height: 'var(--radix-accordion-content-height)' },\n          to: { height: 0 },\n        },\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n      },\n    },\n  },\n  plugins: [require('tailwindcss-animate')],\n}",
      "styles/globals.css": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n    --primary: 222.2 47.4% 11.2%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 210 40% 96%;\n    --secondary-foreground: 222.2 84% 4.9%;\n    --muted: 210 40% 96%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n    --accent: 210 40% 96%;\n    --accent-foreground: 222.2 84% 4.9%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 222.2 84% 4.9%;\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 212.7 26.8% 83.9%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}"
    },
    "instructions": "You are a senior software engineer & UI design expert with next.js and you are going to build what the user is asking and integrate whats needed.",
    "port": 3000
  },
  "vue-developer": {
    "name": "Vue.js developer",
    "lib": ["vue@latest", "nuxt@3.13.0", "tailwindcss", "@nuxt/ui"],
    "files": {
      "app.vue": "<template>\n  <div>\n    <NuxtLayout>\n      <NuxtPage />\n    </NuxtLayout>\n  </div>\n</template>\n\n<script setup>\n// Global app configuration\nuseHead({\n  title: 'Vue AI App Builder',\n  meta: [\n    { name: 'description', content: 'Build AI applications with Vue.js and Nuxt' }\n  ]\n})\n</script>",
      "pages/index.vue": "<template>\n  <div class=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n    <div class=\"container mx-auto px-4 py-8\">\n      <!-- Header -->\n      <div class=\"mb-8\">\n        <h1 class=\"text-4xl font-bold text-gray-900 dark:text-white mb-2\">\n          Vue AI App Builder\n        </h1>\n        <p class=\"text-lg text-gray-600 dark:text-gray-300\">\n          Build and deploy AI applications with Vue.js\n        </p>\n      </div>\n\n      <!-- Navigation Tabs -->\n      <UTabs :items=\"tabs\" class=\"mb-8\" v-model=\"selectedTab\">\n        <template #dashboard=\"{ item }\">\n          <DashboardView />\n        </template>\n        \n        <template #analytics=\"{ item }\">\n          <AnalyticsView />\n        </template>\n        \n        <template #settings=\"{ item }\">\n          <SettingsView />\n        </template>\n      </UTabs>\n    </div>\n  </div>\n</template>\n\n<script setup>\nconst selectedTab = ref(0)\n\nconst tabs = [\n  {\n    key: 'dashboard',\n    label: 'Dashboard',\n    icon: 'i-heroicons-home'\n  },\n  {\n    key: 'analytics', \n    label: 'Analytics',\n    icon: 'i-heroicons-chart-bar'\n  },\n  {\n    key: 'settings',\n    label: 'Settings', \n    icon: 'i-heroicons-cog-6-tooth'\n  }\n]\n</script>",
      "components/DashboardView.vue": "<template>\n  <div class=\"space-y-6\">\n    <!-- Stats Grid -->\n    <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      <UCard v-for=\"stat in stats\" :key=\"stat.title\">\n        <template #header>\n          <div class=\"flex items-center justify-between\">\n            <h3 class=\"text-sm font-medium text-gray-500 dark:text-gray-400\">\n              {{ stat.title }}\n            </h3>\n            <UIcon :name=\"stat.icon\" class=\"h-5 w-5 text-gray-400\" />\n          </div>\n        </template>\n        \n        <div class=\"mt-2\">\n          <p class=\"text-3xl font-bold text-gray-900 dark:text-white\">\n            {{ stat.value }}\n          </p>\n          <p class=\"text-sm\" :class=\"stat.changeColor\">\n            {{ stat.change }}\n          </p>\n        </div>\n      </UCard>\n    </div>\n\n    <!-- Main Content Grid -->\n    <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      <!-- Quick Actions -->\n      <UCard>\n        <template #header>\n          <h3 class=\"text-lg font-semibold\">Quick Actions</h3>\n        </template>\n        \n        <div class=\"space-y-3\">\n          <UButton \n            v-for=\"action in quickActions\" \n            :key=\"action.label\"\n            :variant=\"action.variant\"\n            :icon=\"action.icon\"\n            block\n            @click=\"handleAction(action.action)\"\n          >\n            {{ action.label }}\n          </UButton>\n        </div>\n      </UCard>\n\n      <!-- System Status -->\n      <UCard>\n        <template #header>\n          <h3 class=\"text-lg font-semibold\">System Status</h3>\n        </template>\n        \n        <div class=\"space-y-4\">\n          <div v-for=\"metric in systemMetrics\" :key=\"metric.name\">\n            <div class=\"flex justify-between text-sm mb-1\">\n              <span>{{ metric.name }}</span>\n              <span>{{ metric.value }}%</span>\n            </div>\n            <UProgress :value=\"metric.value\" :color=\"metric.color\" />\n          </div>\n        </div>\n      </UCard>\n    </div>\n\n    <!-- Recent Activity -->\n    <UCard>\n      <template #header>\n        <h3 class=\"text-lg font-semibold\">Recent Activity</h3>\n      </template>\n      \n      <div class=\"space-y-3\">\n        <div v-for=\"activity in recentActivity\" :key=\"activity.id\" class=\"flex items-center space-x-3\">\n          <UAvatar :src=\"activity.avatar\" :alt=\"activity.user\" size=\"sm\" />\n          <div class=\"flex-1\">\n            <p class=\"text-sm text-gray-900 dark:text-white\">\n              <span class=\"font-medium\">{{ activity.user }}</span>\n              {{ activity.action }}\n            </p>\n            <p class=\"text-xs text-gray-500\">{{ activity.time }}</p>\n          </div>\n        </div>\n      </div>\n    </UCard>\n  </div>\n</template>\n\n<script setup>\nconst stats = ref([\n  {\n    title: 'Total Users',\n    value: '2,543',\n    change: '+12%',\n    changeColor: 'text-green-600',\n    icon: 'i-heroicons-users'\n  },\n  {\n    title: 'Active Sessions', \n    value: '1,234',\n    change: '+5%',\n    changeColor: 'text-green-600',\n    icon: 'i-heroicons-signal'\n  },\n  {\n    title: 'Success Rate',\n    value: '98.2%', \n    change: '+0.3%',\n    changeColor: 'text-green-600',\n    icon: 'i-heroicons-chart-bar-square'\n  },\n  {\n    title: 'API Calls',\n    value: '45,678',\n    change: '+23%', \n    changeColor: 'text-green-600',\n    icon: 'i-heroicons-bolt'\n  }\n])\n\nconst quickActions = ref([\n  {\n    label: 'Create New App',\n    action: 'create-app',\n    variant: 'solid',\n    icon: 'i-heroicons-plus'\n  },\n  {\n    label: 'Deploy Application',\n    action: 'deploy-app', \n    variant: 'outline',\n    icon: 'i-heroicons-rocket-launch'\n  },\n  {\n    label: 'View Logs',\n    action: 'view-logs',\n    variant: 'ghost',\n    icon: 'i-heroicons-document-text'\n  }\n])\n\nconst systemMetrics = ref([\n  { name: 'CPU Usage', value: 45, color: 'blue' },\n  { name: 'Memory', value: 67, color: 'yellow' },\n  { name: 'Storage', value: 23, color: 'green' }\n])\n\nconst recentActivity = ref([\n  {\n    id: 1,\n    user: 'John Doe',\n    action: 'deployed new application',\n    time: '2 minutes ago',\n    avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=32&h=32&fit=crop&crop=face'\n  },\n  {\n    id: 2, \n    user: 'Jane Smith',\n    action: 'updated API configuration',\n    time: '1 hour ago',\n    avatar: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=32&h=32&fit=crop&crop=face'\n  },\n  {\n    id: 3,\n    user: 'Mike Johnson', \n    action: 'created new fragment',\n    time: '3 hours ago',\n    avatar: 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=32&h=32&fit=crop&crop=face'\n  }\n])\n\nfunction handleAction(action) {\n  console.log('Action triggered:', action)\n  // Implement action handlers here\n}\n</script>",
      "components/AnalyticsView.vue": "<template>\n  <div class=\"space-y-6\">\n    <UCard>\n      <template #header>\n        <h3 class=\"text-lg font-semibold\">Analytics Overview</h3>\n      </template>\n      \n      <UTabs :items=\"analyticsTabs\" v-model=\"selectedAnalyticsTab\">\n        <template #usage=\"{ item }\">\n          <div class=\"grid grid-cols-1 md:grid-cols-3 gap-6 mt-6\">\n            <UCard v-for=\"metric in usageMetrics\" :key=\"metric.title\">\n              <template #header>\n                <div class=\"flex items-center justify-between\">\n                  <h4 class=\"text-sm font-medium\">{{ metric.title }}</h4>\n                  <UIcon :name=\"metric.icon\" class=\"h-4 w-4 text-gray-400\" />\n                </div>\n              </template>\n              \n              <div class=\"mt-2\">\n                <p class=\"text-2xl font-bold\">{{ metric.value }}</p>\n                <p class=\"text-sm text-gray-500\">{{ metric.description }}</p>\n              </div>\n            </UCard>\n          </div>\n        </template>\n        \n        <template #performance=\"{ item }\">\n          <div class=\"mt-6\">\n            <UCard>\n              <template #header>\n                <h4 class=\"text-lg font-semibold\">Performance Metrics</h4>\n              </template>\n              <p class=\"text-gray-500\">Performance charts and detailed metrics will be displayed here.</p>\n            </UCard>\n          </div>\n        </template>\n        \n        <template #errors=\"{ item }\">\n          <div class=\"mt-6\">\n            <UCard>\n              <template #header>\n                <h4 class=\"text-lg font-semibold\">Error Analysis</h4>\n              </template>\n              <p class=\"text-gray-500\">Error tracking and analysis dashboard will be displayed here.</p>\n            </UCard>\n          </div>\n        </template>\n      </UTabs>\n    </UCard>\n  </div>\n</template>\n\n<script setup>\nconst selectedAnalyticsTab = ref(0)\n\nconst analyticsTabs = [\n  { key: 'usage', label: 'Usage', icon: 'i-heroicons-chart-bar' },\n  { key: 'performance', label: 'Performance', icon: 'i-heroicons-clock' },\n  { key: 'errors', label: 'Errors', icon: 'i-heroicons-exclamation-triangle' }\n]\n\nconst usageMetrics = ref([\n  {\n    title: 'Total Requests',\n    value: '145,892',\n    description: '+15% from last month',\n    icon: 'i-heroicons-chart-bar-square'\n  },\n  {\n    title: 'Avg Response Time',\n    value: '234ms',\n    description: '-12ms from last week', \n    icon: 'i-heroicons-clock'\n  },\n  {\n    title: 'Success Rate',\n    value: '99.1%',\n    description: '+0.3% improvement',\n    icon: 'i-heroicons-check-circle'\n  }\n])\n</script>",
      "components/SettingsView.vue": "<template>\n  <div class=\"space-y-6\">\n    <UCard>\n      <template #header>\n        <h3 class=\"text-lg font-semibold\">Application Settings</h3>\n      </template>\n      \n      <UForm :schema=\"schema\" :state=\"state\" @submit=\"onSubmit\" class=\"space-y-4\">\n        <UFormGroup label=\"API Key\" name=\"apiKey\">\n          <UInput v-model=\"state.apiKey\" type=\"password\" placeholder=\"Enter your API key\" />\n        </UFormGroup>\n        \n        <UFormGroup label=\"Environment\" name=\"environment\">\n          <USelect v-model=\"state.environment\" :options=\"environments\" />\n        </UFormGroup>\n        \n        <UFormGroup label=\"Auto Deploy\" name=\"autoDeploy\">\n          <UToggle v-model=\"state.autoDeploy\" />\n        </UFormGroup>\n        \n        <UFormGroup label=\"Notifications\" name=\"notifications\">\n          <UCheckbox v-model=\"state.notifications\" label=\"Enable email notifications\" />\n        </UFormGroup>\n        \n        <div class=\"flex justify-end space-x-3\">\n          <UButton variant=\"outline\" @click=\"resetForm\">Reset</UButton>\n          <UButton type=\"submit\" :loading=\"loading\">Save Settings</UButton>\n        </div>\n      </UForm>\n    </UCard>\n    \n    <!-- Danger Zone -->\n    <UCard>\n      <template #header>\n        <h3 class=\"text-lg font-semibold text-red-600\">Danger Zone</h3>\n      </template>\n      \n      <div class=\"space-y-4\">\n        <p class=\"text-sm text-gray-600\">These actions cannot be undone.</p>\n        <div class=\"flex space-x-3\">\n          <UButton color=\"red\" variant=\"outline\" @click=\"clearCache\">Clear Cache</UButton>\n          <UButton color=\"red\" @click=\"resetApplication\">Reset Application</UButton>\n        </div>\n      </div>\n    </UCard>\n  </div>\n</template>\n\n<script setup>\nimport { z } from 'zod'\n\nconst schema = z.object({\n  apiKey: z.string().min(1, 'API Key is required'),\n  environment: z.string(),\n  autoDeploy: z.boolean(),\n  notifications: z.boolean()\n})\n\nconst state = reactive({\n  apiKey: '',\n  environment: 'development',\n  autoDeploy: false,\n  notifications: true\n})\n\nconst loading = ref(false)\n\nconst environments = [\n  { label: 'Development', value: 'development' },\n  { label: 'Staging', value: 'staging' },\n  { label: 'Production', value: 'production' }\n]\n\nasync function onSubmit() {\n  loading.value = true\n  try {\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1000))\n    console.log('Settings saved:', state)\n  } finally {\n    loading.value = false\n  }\n}\n\nfunction resetForm() {\n  Object.assign(state, {\n    apiKey: '',\n    environment: 'development', \n    autoDeploy: false,\n    notifications: true\n  })\n}\n\nfunction clearCache() {\n  console.log('Cache cleared')\n}\n\nfunction resetApplication() {\n  console.log('Application reset')\n}\n</script>",
      "nuxt.config.ts": "export default defineNuxtConfig({\n  devtools: { enabled: true },\n  modules: ['@nuxt/ui'],\n  css: ['~/assets/css/main.css'],\n  colorMode: {\n    preference: 'system'\n  },\n  ui: {\n    global: true,\n    icons: ['heroicons', 'simple-icons']\n  }\n})",
      "assets/css/main.css": "@import 'tailwindcss/base';\n@import 'tailwindcss/components';\n@import 'tailwindcss/utilities';"
    },
    "instructions": "Vue.js application builder with Nuxt 3 and Nuxt UI. Starts with a complete dashboard template featuring modern Vue 3 composition API, Nuxt UI components, and responsive design. Modify the template pages and components to create progressive web applications that integrate with AI services and external APIs.",
    "port": 3000
  },
  "streamlit-developer": {
    "name": "Streamlit developer",
    "lib": [
      "streamlit",
      "pandas",
      "numpy",
      "matplotlib",
      "plotly",
      "seaborn",
      "requests",
      "altair",
      "bokeh"
    ],
    "files": {
      "app.py": "import streamlit as st\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom datetime import datetime, timedelta\nimport requests\n\n# Configure page\nst.set_page_config(\n    page_title=\"AI App Dashboard\",\n    page_icon=\"🤖\",\n    layout=\"wide\",\n    initial_sidebar_state=\"expanded\"\n)\n\n# Custom CSS\nst.markdown(\"\"\"\n<style>\n.main-header {\n    font-size: 3rem;\n    font-weight: bold;\n    color: #1f77b4;\n    text-align: center;\n    margin-bottom: 2rem;\n}\n.metric-container {\n    background-color: #f0f2f6;\n    padding: 1rem;\n    border-radius: 0.5rem;\n    border-left: 4px solid #1f77b4;\n}\n</style>\n\"\"\", unsafe_allow_html=True)\n\ndef main():\n    st.markdown('<h1 class=\"main-header\">🤖 AI Application Dashboard</h1>', unsafe_allow_html=True)\n    \n    # Sidebar\n    with st.sidebar:\n        st.header(\"Navigation\")\n        page = st.selectbox(\"Choose a page\", [\"Dashboard\", \"Analytics\", \"Data Explorer\", \"Settings\"])\n        \n        st.header(\"Quick Actions\")\n        if st.button(\"🚀 Deploy App\", use_container_width=True):\n            st.success(\"App deployment initiated!\")\n        if st.button(\"📊 Generate Report\", use_container_width=True):\n            st.info(\"Report generation started...\")\n        if st.button(\"🔄 Refresh Data\", use_container_width=True):\n            st.experimental_rerun()\n    \n    # Main content based on page selection\n    if page == \"Dashboard\":\n        show_dashboard()\n    elif page == \"Analytics\":\n        show_analytics() \n    elif page == \"Data Explorer\":\n        show_data_explorer()\n    elif page == \"Settings\":\n        show_settings()\n\ndef show_dashboard():\n    st.header(\"📊 Dashboard Overview\")\n    \n    # Metrics row\n    col1, col2, col3, col4 = st.columns(4)\n    \n    with col1:\n        st.metric(\n            label=\"Total Users\",\n            value=\"2,543\",\n            delta=\"+12%\"\n        )\n    \n    with col2:\n        st.metric(\n            label=\"Active Sessions\", \n            value=\"1,234\",\n            delta=\"+5%\"\n        )\n    \n    with col3:\n        st.metric(\n            label=\"Success Rate\",\n            value=\"98.2%\",\n            delta=\"+0.3%\"\n        )\n    \n    with col4:\n        st.metric(\n            label=\"API Calls\",\n            value=\"45,678\",\n            delta=\"+23%\"\n        )\n    \n    st.divider()\n    \n    # Charts row\n    col1, col2 = st.columns(2)\n    \n    with col1:\n        st.subheader(\"Usage Trends\")\n        # Sample data for line chart\n        dates = pd.date_range(start='2024-01-01', end='2024-01-31', freq='D')\n        usage_data = pd.DataFrame({\n            'date': dates,\n            'users': np.random.randint(100, 500, len(dates)),\n            'sessions': np.random.randint(50, 300, len(dates))\n        })\n        \n        fig = px.line(usage_data, x='date', y=['users', 'sessions'], \n                     title=\"Daily Usage Statistics\")\n        st.plotly_chart(fig, use_container_width=True)\n    \n    with col2:\n        st.subheader(\"Performance Metrics\")\n        # Sample data for bar chart\n        metrics_data = pd.DataFrame({\n            'metric': ['Response Time', 'Throughput', 'Error Rate', 'Uptime'],\n            'value': [234, 89, 2.1, 99.8],\n            'target': [250, 85, 3.0, 99.5]\n        })\n        \n        fig = go.Figure()\n        fig.add_trace(go.Bar(name='Current', x=metrics_data['metric'], y=metrics_data['value']))\n        fig.add_trace(go.Bar(name='Target', x=metrics_data['metric'], y=metrics_data['target']))\n        fig.update_layout(title=\"Performance vs Targets\", barmode='group')\n        st.plotly_chart(fig, use_container_width=True)\n    \n    # Recent activity\n    st.subheader(\"Recent Activity\")\n    activity_data = pd.DataFrame({\n        'Time': ['2 min ago', '15 min ago', '1 hour ago', '2 hours ago'],\n        'User': ['john.doe', 'jane.smith', 'mike.johnson', 'sarah.wilson'],\n        'Action': ['Deployed new model', 'Updated configuration', 'Created fragment', 'Ran analysis'],\n        'Status': ['✅ Success', '✅ Success', '✅ Success', '⚠️ Warning']\n    })\n    st.dataframe(activity_data, use_container_width=True)\n\ndef show_analytics():\n    st.header(\"📈 Analytics\")\n    \n    # Analytics filters\n    col1, col2, col3 = st.columns(3)\n    with col1:\n        date_range = st.date_input(\"Date Range\", value=[datetime.now() - timedelta(days=30), datetime.now()])\n    with col2:\n        metric_type = st.selectbox(\"Metric Type\", [\"Usage\", \"Performance\", \"Errors\"])\n    with col3:\n        granularity = st.selectbox(\"Granularity\", [\"Daily\", \"Weekly\", \"Monthly\"])\n    \n    st.divider()\n    \n    # Generate sample analytics data based on selections\n    if metric_type == \"Usage\":\n        st.subheader(\"Usage Analytics\")\n        \n        # Sample usage data\n        sample_data = pd.DataFrame({\n            'date': pd.date_range(start=date_range[0], end=date_range[1], freq='D'),\n            'page_views': np.random.randint(1000, 5000, len(pd.date_range(start=date_range[0], end=date_range[1], freq='D'))),\n            'unique_users': np.random.randint(500, 2000, len(pd.date_range(start=date_range[0], end=date_range[1], freq='D'))),\n            'api_calls': np.random.randint(2000, 10000, len(pd.date_range(start=date_range[0], end=date_range[1], freq='D')))\n        })\n        \n        # Usage chart\n        fig = px.area(sample_data, x='date', y=['page_views', 'unique_users', 'api_calls'],\n                     title=f\"Usage Metrics ({granularity})\")\n        st.plotly_chart(fig, use_container_width=True)\n        \n    elif metric_type == \"Performance\":\n        st.subheader(\"Performance Analytics\")\n        \n        # Sample performance data\n        perf_data = pd.DataFrame({\n            'endpoint': ['/api/predict', '/api/train', '/api/data', '/api/deploy'],\n            'avg_response_time': [234, 1200, 89, 567],\n            'p95_response_time': [450, 2100, 150, 890],\n            'error_rate': [0.5, 1.2, 0.1, 0.8]\n        })\n        \n        col1, col2 = st.columns(2)\n        with col1:\n            fig = px.bar(perf_data, x='endpoint', y='avg_response_time',\n                        title=\"Average Response Time by Endpoint\")\n            st.plotly_chart(fig, use_container_width=True)\n        \n        with col2:\n            fig = px.scatter(perf_data, x='avg_response_time', y='error_rate',\n                           size='p95_response_time', hover_data=['endpoint'],\n                           title=\"Response Time vs Error Rate\")\n            st.plotly_chart(fig, use_container_width=True)\n    \n    else:  # Errors\n        st.subheader(\"Error Analytics\")\n        \n        error_data = pd.DataFrame({\n            'error_type': ['Timeout', 'Invalid Input', 'Server Error', 'Rate Limit'],\n            'count': [45, 123, 23, 67],\n            'percentage': [17.8, 48.6, 9.1, 26.5]\n        })\n        \n        col1, col2 = st.columns(2)\n        with col1:\n            fig = px.pie(error_data, values='count', names='error_type',\n                        title=\"Error Distribution\")\n            st.plotly_chart(fig, use_container_width=True)\n        \n        with col2:\n            st.subheader(\"Error Details\")\n            st.dataframe(error_data, use_container_width=True)\n\ndef show_data_explorer():\n    st.header(\"🔍 Data Explorer\")\n    \n    # File upload\n    uploaded_file = st.file_uploader(\"Upload a dataset\", type=['csv', 'xlsx', 'json'])\n    \n    if uploaded_file is not None:\n        # Load data based on file type\n        if uploaded_file.name.endswith('.csv'):\n            df = pd.read_csv(uploaded_file)\n        elif uploaded_file.name.endswith('.xlsx'):\n            df = pd.read_excel(uploaded_file)\n        elif uploaded_file.name.endswith('.json'):\n            df = pd.read_json(uploaded_file)\n        \n        st.success(f\"Loaded {df.shape[0]} rows and {df.shape[1]} columns\")\n        \n        # Data overview\n        col1, col2 = st.columns(2)\n        \n        with col1:\n            st.subheader(\"Dataset Info\")\n            st.write(f\"Shape: {df.shape}\")\n            st.write(f\"Memory usage: {df.memory_usage().sum() / 1024**2:.2f} MB\")\n            \n        with col2:\n            st.subheader(\"Data Types\")\n            st.write(df.dtypes)\n        \n        # Data preview\n        st.subheader(\"Data Preview\")\n        st.dataframe(df.head(100), use_container_width=True)\n        \n        # Basic statistics\n        if st.checkbox(\"Show Statistics\"):\n            st.subheader(\"Descriptive Statistics\")\n            st.dataframe(df.describe(), use_container_width=True)\n        \n        # Visualization options\n        if len(df.columns) > 1:\n            st.subheader(\"Quick Visualization\")\n            \n            col1, col2, col3 = st.columns(3)\n            with col1:\n                chart_type = st.selectbox(\"Chart Type\", [\"Scatter\", \"Line\", \"Bar\", \"Histogram\"])\n            with col2:\n                x_col = st.selectbox(\"X Column\", df.columns)\n            with col3:\n                y_col = st.selectbox(\"Y Column\", [col for col in df.columns if col != x_col])\n            \n            if chart_type == \"Scatter\":\n                fig = px.scatter(df, x=x_col, y=y_col)\n            elif chart_type == \"Line\":\n                fig = px.line(df, x=x_col, y=y_col)\n            elif chart_type == \"Bar\":\n                fig = px.bar(df, x=x_col, y=y_col)\n            else:  # Histogram\n                fig = px.histogram(df, x=x_col)\n            \n            st.plotly_chart(fig, use_container_width=True)\n    \n    else:\n        # Sample data explorer\n        st.info(\"Upload a file to explore your data, or use the sample dataset below.\")\n        \n        if st.button(\"Load Sample Dataset\"):\n            # Generate sample data\n            sample_df = pd.DataFrame({\n                'date': pd.date_range('2024-01-01', periods=100),\n                'sales': np.random.randint(1000, 5000, 100),\n                'region': np.random.choice(['North', 'South', 'East', 'West'], 100),\n                'product': np.random.choice(['A', 'B', 'C'], 100),\n                'customer_satisfaction': np.random.uniform(3.0, 5.0, 100)\n            })\n            \n            st.session_state['sample_data'] = sample_df\n            st.experimental_rerun()\n        \n        if 'sample_data' in st.session_state:\n            df = st.session_state['sample_data']\n            st.subheader(\"Sample Dataset\")\n            st.dataframe(df, use_container_width=True)\n            \n            # Quick analysis of sample data\n            col1, col2 = st.columns(2)\n            with col1:\n                fig = px.line(df, x='date', y='sales', color='region')\n                st.plotly_chart(fig, use_container_width=True)\n            \n            with col2:\n                fig = px.box(df, x='product', y='customer_satisfaction')\n                st.plotly_chart(fig, use_container_width=True)\n\ndef show_settings():\n    st.header(\"⚙️ Settings\")\n    \n    # Application settings\n    st.subheader(\"Application Configuration\")\n    \n    with st.form(\"settings_form\"):\n        col1, col2 = st.columns(2)\n        \n        with col1:\n            api_key = st.text_input(\"API Key\", type=\"password\", help=\"Your API key for external services\")\n            environment = st.selectbox(\"Environment\", [\"Development\", \"Staging\", \"Production\"])\n            auto_refresh = st.checkbox(\"Auto-refresh data\", value=True)\n            \n        with col2:\n            theme = st.selectbox(\"Theme\", [\"Light\", \"Dark\", \"Auto\"])\n            notifications = st.checkbox(\"Enable notifications\", value=True)\n            debug_mode = st.checkbox(\"Debug mode\", value=False)\n        \n        # Advanced settings\n        st.subheader(\"Advanced Settings\")\n        \n        max_rows = st.number_input(\"Max rows to display\", min_value=100, max_value=10000, value=1000)\n        cache_duration = st.slider(\"Cache duration (minutes)\", 1, 60, 15)\n        \n        submitted = st.form_submit_button(\"Save Settings\")\n        \n        if submitted:\n            st.success(\"Settings saved successfully!\")\n            # Here you would typically save to a config file or database\n    \n    st.divider()\n    \n    # System information\n    st.subheader(\"System Information\")\n    \n    col1, col2 = st.columns(2)\n    \n    with col1:\n        st.info(f\"**Streamlit Version:** {st.__version__}\")\n        st.info(f\"**Python Version:** 3.9+\")\n        st.info(f\"**Current Time:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\")\n    \n    with col2:\n        if st.button(\"Clear Cache\", type=\"secondary\"):\n            st.cache_data.clear()\n            st.success(\"Cache cleared!\")\n        \n        if st.button(\"Export Settings\", type=\"secondary\"):\n            st.download_button(\n                label=\"Download settings.json\",\n                data='{\"api_key\": \"***\", \"environment\": \"development\"}',\n                file_name=\"settings.json\",\n                mime=\"application/json\"\n            )\n    \n    # Danger zone\n    with st.expander(\"⚠️ Danger Zone\", expanded=False):\n        st.warning(\"These actions cannot be undone!\")\n        \n        col1, col2 = st.columns(2)\n        with col1:\n            if st.button(\"Reset Application\", type=\"primary\"):\n                st.error(\"Application reset initiated...\")\n        \n        with col2:\n            if st.button(\"Delete All Data\", type=\"primary\"):\n                st.error(\"Data deletion initiated...\")\n\nif __name__ == \"__main__\":\n    main()",
      "pages/1_📊_Analytics.py": "import streamlit as st\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom datetime import datetime, timedelta\n\nst.set_page_config(page_title=\"Analytics\", page_icon=\"📊\")\n\nst.title(\"📊 Advanced Analytics\")\n\n# Real-time metrics simulation\nif 'metrics_data' not in st.session_state:\n    st.session_state.metrics_data = []\n\n# Auto-refresh toggle\nauto_refresh = st.checkbox(\"Auto-refresh (every 5 seconds)\", value=False)\n\nif auto_refresh:\n    import time\n    time.sleep(5)\n    st.experimental_rerun()\n\n# Filters\ncol1, col2, col3 = st.columns(3)\nwith col1:\n    date_filter = st.date_input(\"Date Range\", value=[datetime.now() - timedelta(days=7), datetime.now()])\nwith col2:\n    metric_filter = st.multiselect(\"Metrics\", [\"Revenue\", \"Users\", \"Sessions\", \"Conversion\"], default=[\"Revenue\", \"Users\"])\nwith col3:\n    granularity = st.selectbox(\"Time Granularity\", [\"Hourly\", \"Daily\", \"Weekly\"])\n\n# Generate sample time series data\ndates = pd.date_range(start=date_filter[0], end=date_filter[1], freq='H' if granularity == 'Hourly' else 'D')\nanalyticsData = pd.DataFrame({\n    'timestamp': dates,\n    'revenue': np.random.normal(1000, 200, len(dates)).cumsum(),\n    'users': np.random.poisson(100, len(dates)).cumsum(),\n    'sessions': np.random.poisson(150, len(dates)).cumsum(),\n    'conversion': np.random.uniform(0.02, 0.08, len(dates))\n})\n\n# Main metrics dashboard\nmetrics_row = st.columns(4)\nfor i, metric in enumerate([\"revenue\", \"users\", \"sessions\", \"conversion\"]):\n    if metric in [m.lower() for m in metric_filter] or metric == \"conversion\":\n        with metrics_row[i]:\n            current_value = analyticsData[metric].iloc[-1]\n            previous_value = analyticsData[metric].iloc[-2] if len(analyticsData) > 1 else current_value\n            delta = current_value - previous_value\n            \n            if metric == \"conversion\":\n                st.metric(f\"{metric.title()} Rate\", f\"{current_value:.2%}\", f\"{delta:.2%}\")\n            else:\n                st.metric(metric.title(), f\"{current_value:,.0f}\", f\"{delta:+,.0f}\")\n\n# Time series charts\nif metric_filter:\n    fig = px.line(analyticsData, x='timestamp', y=[m.lower() for m in metric_filter],\n                  title=f\"{granularity} Trends\")\n    st.plotly_chart(fig, use_container_width=True)\n\n# Advanced analytics\ncol1, col2 = st.columns(2)\n\nwith col1:\n    st.subheader(\"Correlation Analysis\")\n    correlation_data = analyticsData[[m.lower() for m in metric_filter]].corr()\n    fig = px.imshow(correlation_data, text_auto=True, title=\"Metric Correlations\")\n    st.plotly_chart(fig, use_container_width=True)\n\nwith col2:\n    st.subheader(\"Distribution Analysis\")\n    selected_metric = st.selectbox(\"Select metric for distribution\", metric_filter)\n    if selected_metric:\n        fig = px.histogram(analyticsData, x=selected_metric.lower(), \n                          title=f\"{selected_metric} Distribution\")\n        st.plotly_chart(fig, use_container_width=True)",
      "pages/2_🔍_Data_Explorer.py": "import streamlit as st\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\n\nst.set_page_config(page_title=\"Data Explorer\", page_icon=\"🔍\")\n\nst.title(\"🔍 Advanced Data Explorer\")\n\n# File upload with multiple formats\nuploaded_files = st.file_uploader(\n    \"Upload your datasets\",\n    type=['csv', 'xlsx', 'json', 'parquet'],\n    accept_multiple_files=True\n)\n\nif uploaded_files:\n    # Process uploaded files\n    datasets = {}\n    for file in uploaded_files:\n        try:\n            if file.name.endswith('.csv'):\n                df = pd.read_csv(file)\n            elif file.name.endswith('.xlsx'):\n                df = pd.read_excel(file)\n            elif file.name.endswith('.json'):\n                df = pd.read_json(file)\n            elif file.name.endswith('.parquet'):\n                df = pd.read_parquet(file)\n            \n            datasets[file.name] = df\n            st.success(f\"✅ Loaded {file.name}: {df.shape[0]} rows, {df.shape[1]} columns\")\n        except Exception as e:\n            st.error(f\"❌ Error loading {file.name}: {str(e)}\")\n    \n    if datasets:\n        # Dataset selection\n        selected_dataset = st.selectbox(\"Select dataset to explore\", list(datasets.keys()))\n        df = datasets[selected_dataset]\n        \n        # Tabs for different analysis types\n        tab1, tab2, tab3, tab4, tab5 = st.tabs([\"📋 Overview\", \"📊 Distributions\", \"🔗 Relationships\", \"🧹 Data Quality\", \"🤖 ML Insights\"])\n        \n        with tab1:\n            st.subheader(\"Dataset Overview\")\n            \n            col1, col2, col3 = st.columns(3)\n            with col1:\n                st.metric(\"Rows\", f\"{df.shape[0]:,}\")\n            with col2:\n                st.metric(\"Columns\", df.shape[1])\n            with col3:\n                st.metric(\"Memory Usage\", f\"{df.memory_usage().sum() / 1024**2:.1f} MB\")\n            \n            # Column information\n            st.subheader(\"Column Information\")\n            column_info = pd.DataFrame({\n                'Column': df.columns,\n                'Type': df.dtypes,\n                'Non-Null Count': df.count(),\n                'Null Count': df.isnull().sum(),\n                'Null %': (df.isnull().sum() / len(df) * 100).round(2)\n            })\n            st.dataframe(column_info, use_container_width=True)\n            \n            # Data preview with filtering\n            st.subheader(\"Data Preview\")\n            \n            # Column filters\n            columns_to_show = st.multiselect(\"Select columns to display\", df.columns.tolist(), default=df.columns.tolist()[:10])\n            \n            # Row filtering\n            if st.checkbox(\"Enable row filtering\"):\n                filter_col = st.selectbox(\"Filter by column\", df.columns)\n                if df[filter_col].dtype in ['object', 'category']:\n                    filter_values = st.multiselect(f\"Select {filter_col} values\", df[filter_col].unique())\n                    if filter_values:\n                        df = df[df[filter_col].isin(filter_values)]\n                else:\n                    min_val, max_val = float(df[filter_col].min()), float(df[filter_col].max())\n                    filter_range = st.slider(f\"Filter {filter_col} range\", min_val, max_val, (min_val, max_val))\n                    df = df[(df[filter_col] >= filter_range[0]) & (df[filter_col] <= filter_range[1])]\n            \n            st.dataframe(df[columns_to_show], use_container_width=True)\n        \n        with tab2:\n            st.subheader(\"Data Distributions\")\n            \n            # Numeric columns\n            numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()\n            categorical_cols = df.select_dtypes(include=['object', 'category']).columns.tolist()\n            \n            if numeric_cols:\n                st.write(\"**Numeric Distributions**\")\n                selected_numeric = st.selectbox(\"Select numeric column\", numeric_cols)\n                \n                col1, col2 = st.columns(2)\n                with col1:\n                    fig = px.histogram(df, x=selected_numeric, title=f\"Distribution of {selected_numeric}\")\n                    st.plotly_chart(fig, use_container_width=True)\n                \n                with col2:\n                    fig = px.box(df, y=selected_numeric, title=f\"Box Plot of {selected_numeric}\")\n                    st.plotly_chart(fig, use_container_width=True)\n            \n            if categorical_cols:\n                st.write(\"**Categorical Distributions**\")\n                selected_categorical = st.selectbox(\"Select categorical column\", categorical_cols)\n                \n                value_counts = df[selected_categorical].value_counts()\n                fig = px.bar(x=value_counts.index, y=value_counts.values, \n                           title=f\"Distribution of {selected_categorical}\")\n                st.plotly_chart(fig, use_container_width=True)\n        \n        with tab3:\n            st.subheader(\"Relationships & Correlations\")\n            \n            if len(numeric_cols) >= 2:\n                # Correlation matrix\n                st.write(\"**Correlation Matrix**\")\n                corr_matrix = df[numeric_cols].corr()\n                fig = px.imshow(corr_matrix, text_auto=True, aspect=\"auto\",\n                              title=\"Correlation Heatmap\")\n                st.plotly_chart(fig, use_container_width=True)\n                \n                # Scatter plots\n                st.write(\"**Scatter Plot Analysis**\")\n                col1, col2, col3 = st.columns(3)\n                with col1:\n                    x_col = st.selectbox(\"X-axis\", numeric_cols)\n                with col2:\n                    y_col = st.selectbox(\"Y-axis\", [col for col in numeric_cols if col != x_col])\n                with col3:\n                    color_col = st.selectbox(\"Color by\", [None] + categorical_cols)\n                \n                fig = px.scatter(df, x=x_col, y=y_col, color=color_col,\n                               title=f\"{x_col} vs {y_col}\")\n                st.plotly_chart(fig, use_container_width=True)\n        \n        with tab4:\n            st.subheader(\"Data Quality Assessment\")\n            \n            # Missing values analysis\n            st.write(\"**Missing Values Analysis**\")\n            missing_data = df.isnull().sum().sort_values(ascending=False)\n            missing_data = missing_data[missing_data > 0]\n            \n            if len(missing_data) > 0:\n                fig = px.bar(x=missing_data.index, y=missing_data.values,\n                           title=\"Missing Values by Column\")\n                st.plotly_chart(fig, use_container_width=True)\n                \n                # Missing patterns\n                if st.checkbox(\"Show missing value patterns\"):\n                    import missingno as msno\n                    fig, ax = plt.subplots(figsize=(10, 6))\n                    msno.matrix(df, ax=ax)\n                    st.pyplot(fig)\n            else:\n                st.success(\"✅ No missing values found!\")\n            \n            # Duplicate analysis\n            st.write(\"**Duplicate Analysis**\")\n            duplicates = df.duplicated().sum()\n            st.metric(\"Duplicate Rows\", duplicates)\n            \n            if duplicates > 0:\n                if st.button(\"Show duplicate rows\"):\n                    st.dataframe(df[df.duplicated()], use_container_width=True)\n            \n            # Outlier detection for numeric columns\n            if numeric_cols:\n                st.write(\"**Outlier Detection (IQR Method)**\")\n                selected_col = st.selectbox(\"Select column for outlier detection\", numeric_cols)\n                \n                Q1 = df[selected_col].quantile(0.25)\n                Q3 = df[selected_col].quantile(0.75)\n                IQR = Q3 - Q1\n                lower_bound = Q1 - 1.5 * IQR\n                upper_bound = Q3 + 1.5 * IQR\n                \n                outliers = df[(df[selected_col] < lower_bound) | (df[selected_col] > upper_bound)]\n                st.metric(f\"Outliers in {selected_col}\", len(outliers))\n                \n                if len(outliers) > 0 and st.checkbox(\"Show outliers\"):\n                    st.dataframe(outliers, use_container_width=True)\n        \n        with tab5:\n            st.subheader(\"Machine Learning Insights\")\n            \n            if len(numeric_cols) >= 2:\n                # PCA Analysis\n                st.write(\"**Principal Component Analysis**\")\n                \n                # Prepare data for PCA\n                pca_data = df[numeric_cols].dropna()\n                if len(pca_data) > 0:\n                    scaler = StandardScaler()\n                    scaled_data = scaler.fit_transform(pca_data)\n                    \n                    pca = PCA()\n                    pca_result = pca.fit_transform(scaled_data)\n                    \n                    # Explained variance\n                    explained_var = pd.DataFrame({\n                        'PC': [f'PC{i+1}' for i in range(len(pca.explained_variance_ratio_))],\n                        'Explained Variance': pca.explained_variance_ratio_\n                    })\n                    \n                    fig = px.bar(explained_var.head(10), x='PC', y='Explained Variance',\n                               title=\"Explained Variance by Principal Component\")\n                    st.plotly_chart(fig, use_container_width=True)\n                    \n                    # PCA scatter plot\n                    if pca_result.shape[1] >= 2:\n                        pca_df = pd.DataFrame({\n                            'PC1': pca_result[:, 0],\n                            'PC2': pca_result[:, 1]\n                        })\n                        \n                        color_by = st.selectbox(\"Color PCA plot by\", [None] + categorical_cols, key=\"pca_color\")\n                        if color_by and color_by in df.columns:\n                            pca_df[color_by] = df[color_by].values[:len(pca_df)]\n                        \n                        fig = px.scatter(pca_df, x='PC1', y='PC2', color=color_by,\n                                       title=\"PCA: First Two Components\")\n                        st.plotly_chart(fig, use_container_width=True)\n                \n                # Feature importance (correlation with target)\n                if st.checkbox(\"Calculate feature importance\"):\n                    target_col = st.selectbox(\"Select target variable\", numeric_cols, key=\"target\")\n                    \n                    if target_col:\n                        correlations = df[numeric_cols].corrwith(df[target_col]).abs().sort_values(ascending=False)\n                        correlations = correlations.drop(target_col)  # Remove self-correlation\n                        \n                        fig = px.bar(x=correlations.index, y=correlations.values,\n                                   title=f\"Feature Importance (Correlation with {target_col})\")\n                        st.plotly_chart(fig, use_container_width=True)\n\nelse:\n    # Demo section when no files uploaded\n    st.info(\"👆 Upload your datasets to start exploring, or try our sample datasets below.\")\n    \n    # Sample datasets\n    if st.button(\"🎲 Generate Sample E-commerce Dataset\"):\n        np.random.seed(42)\n        sample_data = pd.DataFrame({\n            'customer_id': range(1, 1001),\n            'age': np.random.randint(18, 80, 1000),\n            'gender': np.random.choice(['M', 'F'], 1000),\n            'income': np.random.normal(50000, 15000, 1000),\n            'purchases': np.random.poisson(10, 1000),\n            'satisfaction': np.random.uniform(1, 5, 1000),\n            'region': np.random.choice(['North', 'South', 'East', 'West'], 1000),\n            'subscription': np.random.choice(['Basic', 'Premium', 'Enterprise'], 1000, p=[0.5, 0.3, 0.2])\n        })\n        \n        st.session_state['sample_ecommerce'] = sample_data\n        st.success(\"✅ Sample e-commerce dataset generated!\")\n        st.experimental_rerun()\n    \n    if 'sample_ecommerce' in st.session_state:\n        st.subheader(\"Sample E-commerce Dataset\")\n        df = st.session_state['sample_ecommerce']\n        \n        col1, col2 = st.columns(2)\n        with col1:\n            st.dataframe(df.head(), use_container_width=True)\n        \n        with col2:\n            fig = px.scatter(df, x='age', y='income', color='subscription',\n                           title=\"Customer Age vs Income by Subscription\")\n            st.plotly_chart(fig, use_container_width=True)",
      "requirements.txt": "streamlit>=1.28.0\npandas>=1.5.0\nnumpy>=1.21.0\nplotly>=5.0.0\nseaborn>=0.11.0\nmatplotlib>=3.5.0\nrequests>=2.25.0\naltair>=4.0.0\nbokeh>=2.4.0\nscikit-learn>=1.0.0\nmissingno>=0.5.0"
    },
    "instructions": "Rapid prototyping tool for building interactive data applications and dashboards. Starts with a comprehensive multi-page template including analytics, data exploration, and settings. Features real-time metrics, file upload capabilities, advanced visualizations, and ML insights. Modify the template to create custom data applications that can process inputs from other fragments.",
    "port": 8501
  },
  "gradio-developer": {
    "name": "Gradio developer",
    "lib": [
      "gradio",
      "pandas",
      "numpy",
      "matplotlib",
      "plotly", 
      "seaborn",
      "requests",
      "scikit-learn",
      "transformers",
      "torch"
    ],
    "files": {
      "app.py": "import gradio as gr\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, classification_report\nimport requests\nimport json\n\n# Global state for demo\nmodel_state = {\"trained_model\": None, \"feature_names\": None, \"target_names\": None}\n\ndef create_sample_dataset(n_samples=1000):\n    \"\"\"Generate sample dataset for demo purposes\"\"\"\n    np.random.seed(42)\n    \n    # Generate features\n    age = np.random.randint(18, 80, n_samples)\n    income = np.random.normal(50000, 15000, n_samples)\n    experience = np.random.poisson(10, n_samples)\n    education = np.random.choice([1, 2, 3, 4], n_samples)  # 1=High School, 2=Bachelor, 3=Master, 4=PhD\n    \n    # Generate target (approval) based on features with some noise\n    approval_prob = (0.3 + \n                    0.2 * (age > 25) + \n                    0.3 * (income > 40000) + \n                    0.2 * (experience > 5) + \n                    0.1 * (education > 2) + \n                    np.random.normal(0, 0.1, n_samples))\n    \n    approval = (approval_prob > 0.5).astype(int)\n    \n    df = pd.DataFrame({\n        'age': age,\n        'income': income,\n        'experience': experience,\n        'education': education,\n        'approved': approval\n    })\n    \n    return df\n\ndef train_model(df, target_column):\n    \"\"\"Train a machine learning model\"\"\"\n    try:\n        # Prepare features and target\n        X = df.drop(columns=[target_column])\n        y = df[target_column]\n        \n        # Split data\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n        \n        # Train model\n        model = RandomForestClassifier(n_estimators=100, random_state=42)\n        model.fit(X_train, y_train)\n        \n        # Evaluate\n        y_pred = model.predict(X_test)\n        accuracy = accuracy_score(y_test, y_pred)\n        \n        # Store in global state\n        model_state[\"trained_model\"] = model\n        model_state[\"feature_names\"] = list(X.columns)\n        model_state[\"target_names\"] = list(y.unique())\n        \n        return f\"Model trained successfully!\\nAccuracy: {accuracy:.3f}\\nFeatures: {list(X.columns)}\"\n    \n    except Exception as e:\n        return f\"Error training model: {str(e)}\"\n\ndef make_prediction(*args):\n    \"\"\"Make prediction using trained model\"\"\"\n    try:\n        if model_state[\"trained_model\"] is None:\n            return \"Please train a model first!\"\n        \n        # Convert input arguments to feature array\n        features = np.array(args).reshape(1, -1)\n        \n        # Make prediction\n        prediction = model_state[\"trained_model\"].predict(features)[0]\n        probabilities = model_state[\"trained_model\"].predict_proba(features)[0]\n        \n        result = f\"Prediction: {prediction}\\n\"\n        result += \"Probabilities:\\n\"\n        for i, prob in enumerate(probabilities):\n            result += f\"  Class {i}: {prob:.3f}\\n\"\n        \n        return result\n    \n    except Exception as e:\n        return f\"Error making prediction: {str(e)}\"\n\ndef analyze_data(df):\n    \"\"\"Analyze uploaded dataset\"\"\"\n    try:\n        analysis = f\"Dataset Analysis\\n\"\n        analysis += f\"Shape: {df.shape}\\n\"\n        analysis += f\"Columns: {list(df.columns)}\\n\\n\"\n        \n        # Basic statistics\n        analysis += \"Numeric Column Statistics:\\n\"\n        numeric_cols = df.select_dtypes(include=[np.number]).columns\n        for col in numeric_cols:\n            analysis += f\"  {col}: mean={df[col].mean():.2f}, std={df[col].std():.2f}\\n\"\n        \n        # Missing values\n        missing = df.isnull().sum()\n        if missing.any():\n            analysis += \"\\nMissing Values:\\n\"\n            for col, count in missing.items():\n                if count > 0:\n                    analysis += f\"  {col}: {count}\\n\"\n        else:\n            analysis += \"\\nNo missing values found.\\n\"\n        \n        return analysis\n    \n    except Exception as e:\n        return f\"Error analyzing data: {str(e)}\"\n\ndef create_visualization(df, plot_type, x_column, y_column=None):\n    \"\"\"Create visualization from dataset\"\"\"\n    try:\n        if plot_type == \"Histogram\":\n            fig = px.histogram(df, x=x_column, title=f\"Distribution of {x_column}\")\n        elif plot_type == \"Scatter Plot\" and y_column:\n            fig = px.scatter(df, x=x_column, y=y_column, title=f\"{x_column} vs {y_column}\")\n        elif plot_type == \"Box Plot\":\n            fig = px.box(df, y=x_column, title=f\"Box Plot of {x_column}\")\n        elif plot_type == \"Bar Chart\":\n            if df[x_column].dtype == 'object' or df[x_column].nunique() < 20:\n                value_counts = df[x_column].value_counts()\n                fig = px.bar(x=value_counts.index, y=value_counts.values, \n                           title=f\"Count of {x_column}\")\n            else:\n                return \"Bar chart requires categorical data or data with fewer unique values\"\n        else:\n            return \"Invalid plot configuration\"\n        \n        return fig\n    \n    except Exception as e:\n        return f\"Error creating visualization: {str(e)}\"\n\ndef process_text(text, operation):\n    \"\"\"Process text input with various operations\"\"\"\n    try:\n        if operation == \"Word Count\":\n            words = len(text.split())\n            chars = len(text)\n            return f\"Words: {words}\\nCharacters: {chars}\\nCharacters (no spaces): {len(text.replace(' ', ''))}\"\n        \n        elif operation == \"Uppercase\":\n            return text.upper()\n        \n        elif operation == \"Lowercase\":\n            return text.lower()\n        \n        elif operation == \"Reverse\":\n            return text[::-1]\n        \n        elif operation == \"Remove Punctuation\":\n            import string\n            return text.translate(str.maketrans('', '', string.punctuation))\n        \n        else:\n            return \"Unknown operation\"\n    \n    except Exception as e:\n        return f\"Error processing text: {str(e)}\"\n\ndef call_api(url, method, headers, payload):\n    \"\"\"Make API calls\"\"\"\n    try:\n        headers_dict = {}\n        if headers:\n            for line in headers.split('\\n'):\n                if ':' in line:\n                    key, value = line.split(':', 1)\n                    headers_dict[key.strip()] = value.strip()\n        \n        if method == \"GET\":\n            response = requests.get(url, headers=headers_dict)\n        elif method == \"POST\":\n            if payload:\n                try:\n                    payload_dict = json.loads(payload)\n                    response = requests.post(url, headers=headers_dict, json=payload_dict)\n                except json.JSONDecodeError:\n                    response = requests.post(url, headers=headers_dict, data=payload)\n            else:\n                response = requests.post(url, headers=headers_dict)\n        else:\n            return \"Unsupported method\"\n        \n        result = f\"Status Code: {response.status_code}\\n\\n\"\n        result += f\"Response Headers:\\n{dict(response.headers)}\\n\\n\"\n        result += f\"Response Body:\\n{response.text[:1000]}...\"\n        \n        return result\n    \n    except Exception as e:\n        return f\"Error making API call: {str(e)}\"\n\n# Create the Gradio interface\nwith gr.Blocks(title=\"AI Application Builder\", theme=gr.themes.Soft()) as demo:\n    gr.Markdown(\"\"\"\n    # 🤖 AI Application Builder\n    \n    Welcome to the AI Application Builder! This comprehensive tool allows you to:\n    - **Train and deploy machine learning models**\n    - **Analyze and visualize datasets** \n    - **Process text and make API calls**\n    - **Create interactive demos**\n    \n    Use the tabs below to explore different functionalities.\n    \"\"\")\n    \n    with gr.Tabs():\n        # Tab 1: Machine Learning\n        with gr.Tab(\"🧠 Machine Learning\"):\n            gr.Markdown(\"### Train and Deploy ML Models\")\n            \n            with gr.Row():\n                with gr.Column():\n                    gr.Markdown(\"#### Data Upload\")\n                    data_file = gr.File(label=\"Upload Dataset (CSV)\", file_types=[\".csv\"])\n                    \n                    gr.Markdown(\"#### Quick Demo\")\n                    demo_btn = gr.Button(\"Generate Sample Dataset\", variant=\"secondary\")\n                    dataset_info = gr.Textbox(label=\"Dataset Info\", lines=10)\n                    \n                with gr.Column():\n                    gr.Markdown(\"#### Model Training\")\n                    target_col = gr.Textbox(label=\"Target Column Name\", value=\"approved\")\n                    train_btn = gr.Button(\"Train Model\", variant=\"primary\")\n                    training_result = gr.Textbox(label=\"Training Results\", lines=5)\n            \n            gr.Markdown(\"#### Make Predictions\")\n            with gr.Row():\n                age_input = gr.Number(label=\"Age\", value=30)\n                income_input = gr.Number(label=\"Income\", value=50000)\n                experience_input = gr.Number(label=\"Experience (years)\", value=5)\n                education_input = gr.Number(label=\"Education Level (1-4)\", value=2)\n            \n            predict_btn = gr.Button(\"Make Prediction\")\n            prediction_result = gr.Textbox(label=\"Prediction Result\", lines=5)\n            \n            # Event handlers for ML tab\n            def load_and_analyze_data(file):\n                if file is not None:\n                    df = pd.read_csv(file.name)\n                    return analyze_data(df), df\n                return \"\", None\n            \n            def generate_demo_data():\n                df = create_sample_dataset()\n                return analyze_data(df), df\n            \n            # Store dataframe in state\n            dataframe_state = gr.State()\n            \n            demo_btn.click(\n                generate_demo_data,\n                outputs=[dataset_info, dataframe_state]\n            )\n            \n            data_file.change(\n                load_and_analyze_data,\n                inputs=[data_file],\n                outputs=[dataset_info, dataframe_state]\n            )\n            \n            train_btn.click(\n                lambda df, target: train_model(df, target) if df is not None else \"Please load data first\",\n                inputs=[dataframe_state, target_col],\n                outputs=[training_result]\n            )\n            \n            predict_btn.click(\n                make_prediction,\n                inputs=[age_input, income_input, experience_input, education_input],\n                outputs=[prediction_result]\n            )\n        \n        # Tab 2: Data Visualization\n        with gr.Tab(\"📊 Data Visualization\"):\n            gr.Markdown(\"### Create Interactive Visualizations\")\n            \n            with gr.Row():\n                with gr.Column():\n                    viz_data_file = gr.File(label=\"Upload Dataset for Visualization\", file_types=[\".csv\"])\n                    \n                    plot_type = gr.Dropdown(\n                        [\"Histogram\", \"Scatter Plot\", \"Box Plot\", \"Bar Chart\"],\n                        label=\"Plot Type\",\n                        value=\"Histogram\"\n                    )\n                    \n                    x_column = gr.Textbox(label=\"X Column\", value=\"age\")\n                    y_column = gr.Textbox(label=\"Y Column (for scatter plot)\", value=\"income\")\n                    \n                    viz_btn = gr.Button(\"Create Visualization\")\n                \n                with gr.Column():\n                    viz_output = gr.Plot(label=\"Visualization\")\n            \n            # Demo visualization button\n            demo_viz_btn = gr.Button(\"Create Demo Visualization\", variant=\"secondary\")\n            \n            def create_demo_viz():\n                df = create_sample_dataset(500)\n                return create_visualization(df, \"Scatter Plot\", \"age\", \"income\")\n            \n            def create_viz",
      "instructions": "AI model interface builder for creating interactive machine learning applications. Build web interfaces for models, create shareable demos, and design user-friendly AI tools. Connect ML models to web interfaces with automatic API generation. Gradio Blocks/Interface should be called demo.",
      "port": 7860
    }
  }
}