import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import { cookies } from 'next/headers'
import { Sandbox } from '@e2b/code-interpreter'

export async function POST(request: NextRequest) {
  try {
    const { projectId, framework, autoCreated } = await request.json()

    if (!projectId || !framework) {
      return NextResponse.json(
        { error: 'Project ID and framework are required' },
        { status: 400 }
      )
    }

    // Verify user authentication
    const cookieStore = await cookies()
    const supabase = createClient(cookieStore)
    const { data: { user }, error: authError } = await supabase.auth.getUser()

    if (authError || !user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    // Verify project ownership
    const { data: project, error: projectError } = await supabase
      .from('projects')
      .select('*')
      .eq('id', projectId)
      .eq('user_id', user.id)
      .single()

    if (projectError || !project) {
      return NextResponse.json(
        { error: 'Project not found' },
        { status: 404 }
      )
    }

    // Initialize E2B sandbox with project structure
    const sandbox = await Sandbox.create({
      metadata: {
        projectId,
        framework,
        autoCreated: autoCreated.toString()
      }
    })

    try {
      // Create basic project structure based on framework
      const initScript = getFrameworkInitScript(framework, project.title)
      
      await sandbox.runCode(initScript)

      // Create project configuration
      const configScript = `
import json
import os

# Create project configuration
config = {
    "projectId": "${projectId}",
    "framework": "${framework}",
    "title": "${project.title}",
    "description": "${project.description}",
    "autoCreated": ${autoCreated},
    "initialized": True,
    "createdAt": "${project.created_at}"
}

# Ensure .codinit directory exists
os.makedirs('.codinit', exist_ok=True)

# Write project config
with open('.codinit/project.json', 'w') as f:
    json.dump(config, f, indent=2)

print("Project configuration created successfully")
      `

      await sandbox.runCode(configScript)

      // Store sandbox session info
      const { error: updateError } = await supabase
        .from('projects')
        .update({
          sandbox_id: sandbox.sandboxId,
          status: 'initialized',
          updated_at: new Date().toISOString()
        })
        .eq('id', projectId)

      if (updateError) {
        console.error('Failed to update project with sandbox info:', updateError)
      }

      return NextResponse.json({
        success: true,
        projectId,
        sandboxId: sandbox.sandboxId,
        framework,
        message: 'Project initialized successfully'
      })

    } finally {
      // Keep sandbox alive for immediate use, will be managed by cleanup service
      // Don't close it immediately as user might start coding right away
    }

  } catch (error) {
    console.error('Error initializing project:', error)
    return NextResponse.json(
      { error: 'Failed to initialize project' },
      { status: 500 }
    )
  }
}

function getFrameworkInitScript(framework: string, title: string): string {
  const commonSetup = `
import os
import subprocess

# Create project directory structure
os.makedirs('src', exist_ok=True)
os.makedirs('public', exist_ok=True)
os.makedirs('components', exist_ok=True)

print(f"Initializing ${framework} project: ${title}")
  `

  switch (framework) {
    case 'nextjs':
      return `${commonSetup}

# Create Next.js specific structure
os.makedirs('app', exist_ok=True)
os.makedirs('lib', exist_ok=True)
os.makedirs('styles', exist_ok=True)

# Create basic package.json
package_json = {
    "name": "${title.toLowerCase().replace(/\s+/g, '-')}",
    "version": "0.1.0",
    "private": True,
    "scripts": {
        "dev": "next dev",
        "build": "next build",
        "start": "next start",
        "lint": "next lint"
    },
    "dependencies": {
        "next": "14.0.0",
        "react": "^18",
        "react-dom": "^18"
    }
}

import json
with open('package.json', 'w') as f:
    json.dump(package_json, f, indent=2)

# Create basic app structure
with open('app/layout.tsx', 'w') as f:
    f.write('''import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: '${title}',
  description: 'Generated by CodinIT.dev',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
''')

with open('app/page.tsx', 'w') as f:
    f.write('''export default function Home() {
  return (
    <main className="container mx-auto px-4 py-8">
      <h1 className="text-4xl font-bold text-center">
        Welcome to ${title}
      </h1>
      <p className="text-center mt-4 text-gray-600">
        Your Next.js project is ready to be customized!
      </p>
    </main>
  )
}
''')

print("Next.js project structure created")
      `

    case 'react':
      return `${commonSetup}

# Create React specific structure
package_json = {
    "name": "${title.toLowerCase().replace(/\s+/g, '-')}",
    "version": "0.1.0",
    "private": True,
    "dependencies": {
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "react-scripts": "5.0.1"
    },
    "scripts": {
        "start": "react-scripts start",
        "build": "react-scripts build",
        "test": "react-scripts test",
        "eject": "react-scripts eject"
    }
}

import json
with open('package.json', 'w') as f:
    json.dump(package_json, f, indent=2)

# Create src/App.js
with open('src/App.js', 'w') as f:
    f.write('''import React from 'react';
import './App.css';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <h1>${title}</h1>
        <p>Your React app is ready to be customized!</p>
      </header>
    </div>
  );
}

export default App;
''')

# Create src/index.js
with open('src/index.js', 'w') as f:
    f.write('''import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
''')

# Create public/index.html
with open('public/index.html', 'w') as f:
    f.write('''<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>${title}</title>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>
''')

print("React project structure created")
      `

    case 'vue':
      return `${commonSetup}

# Create Vue specific structure
package_json = {
    "name": "${title.toLowerCase().replace(/\s+/g, '-')}",
    "version": "0.1.0",
    "private": True,
    "scripts": {
        "serve": "vue-cli-service serve",
        "build": "vue-cli-service build",
        "lint": "vue-cli-service lint"
    },
    "dependencies": {
        "core-js": "^3.8.3",
        "vue": "^3.2.13"
    }
}

import json
with open('package.json', 'w') as f:
    json.dump(package_json, f, indent=2)

# Create src/App.vue
with open('src/App.vue', 'w') as f:
    f.write('''<template>
  <div id="app">
    <h1>${title}</h1>
    <p>Your Vue.js app is ready to be customized!</p>
  </div>
</template>

<script>
export default {
  name: 'App'
}
</script>

<style>
#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  margin-top: 60px;
}
</style>
''')

# Create src/main.js
with open('src/main.js', 'w') as f:
    f.write('''import { createApp } from 'vue'
import App from './App.vue'

createApp(App).mount('#app')
''')

print("Vue.js project structure created")
      `

    case 'streamlit':
      return `${commonSetup}

# Create Streamlit app
with open('app.py', 'w') as f:
    f.write('''import streamlit as st

st.set_page_config(
    page_title="${title}",
    page_icon="ðŸš€",
    layout="wide"
)

st.title("${title}")
st.write("Your Streamlit app is ready to be customized!")

# Sample components
col1, col2 = st.columns(2)

with col1:
    st.header("Section 1")
    st.write("Add your content here")

with col2:
    st.header("Section 2")
    st.write("Add your content here")
''')

# Create requirements.txt
with open('requirements.txt', 'w') as f:
    f.write('''streamlit>=1.28.0
pandas>=1.5.0
numpy>=1.21.0
''')

print("Streamlit project structure created")
      `

    case 'gradio':
      return `${commonSetup}

# Create Gradio app
with open('app.py', 'w') as f:
    f.write('''import gradio as gr

def greet(name):
    return f"Hello {name}! Welcome to ${title}"

# Create the Gradio interface
demo = gr.Interface(
    fn=greet,
    inputs=gr.Textbox(placeholder="Enter your name"),
    outputs="text",
    title="${title}",
    description="Your Gradio app is ready to be customized!"
)

if __name__ == "__main__":
    demo.launch()
''')

# Create requirements.txt
with open('requirements.txt', 'w') as f:
    f.write('''gradio>=3.50.0
''')

print("Gradio project structure created")
      `

    default:
      return `${commonSetup}
print("Basic project structure created")
      `
  }
}
